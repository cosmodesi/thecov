
import numpy as np


class T0:

    # Here are the expressions used to calculate the tree-level trispectrum
    # These (horrible) expressions were copy-pasted from the
    # mathematica notebook (Generating_T0_Z12_expressions.nb),
    # which shows their derivation

    def __init__(self, b1, be, g2, b2, g3, g2x, g21, b3):
        self.b1 = b1
        self.b2 = b2
        self.b3 = b3
        self.be = be
        self.g2 = g2
        self.g3 = g3
        self.g2x = g2x
        self.g21 = g21

        self.l1 = None
        self.l2 = None

    def Z12Kernel(self, l, mu, dlnpk):

        b1, b2, be, g2 = self.b1, self.b2, self.be, self.g2

        if l == 0:
            return (7*b1**2*be*(70 + 42*be + (-35*(-3 + dlnpk) + 3*be*(28 + 13*be - 14*dlnpk - 5*be*dlnpk))*mu**2) +
                    b1*(35*(47 - 7*dlnpk) + be*(798 + 153*be - 98*dlnpk - 21*be*dlnpk +
                                                4*(84 + be*(48 - 21*dlnpk) - 49*dlnpk)*mu**2)) +
                    98*(5*b2*(3 + be) + 4*g2*(-5 + be*(-2 + mu**2))))/(735.*b1**2)
        elif l == 2:
            return (14*b1**2*be*(14 + 12*be + (2*be*(12 + 7*be) - (1 + be)*(7 + 5*be)*dlnpk)*mu**2) +
                    b1*(4*be*(69 + 19*be) - 7*be*(2 + be)*dlnpk +
                    (24*be*(11 + 6*be) - 7*(21 + be*(22 + 9*be))*dlnpk)*mu**2 + 7*(-8 + 7*dlnpk + 24*mu**2)) +
                    28*(7*b2*be + g2*(-7 - 13*be + (21 + 11*be)*mu**2)))/(147.*b1**2)
        elif l == 4:
            return (8*be*(b1*(-132 + 77*dlnpk + be*(23 + 154*b1 + 14*dlnpk)) - 154*g2 +
                    (b1*(396 - 231*dlnpk + be*(272 + 308*b1 + 343*b1*be - 7*(17 + b1*(22 + 15*be))*dlnpk)) +
                    462*g2)*mu**2))/(2695.*b1**2)

    # Shot noise term in Eq. 92
    def e24o44(self, u12, k1, k2):

        l1, l2 = self.l1, self.l2
        be = self.be

        if l1 == 0 and l2 == 0:
            return (15 + 10*be + 3*be**2)/15.

        elif l1 == 0 and l2 == 2:
            return (2*be*(7 + 3*be)*(2*k2**2 + 4*k1*k2*u12 + k1**2*(-1 + 3*u12**2)))/(21.*(k1**2 + k2**2 + 2*k1*k2*u12))

        elif l1 == 2 and l2 == 2:
            return (5*((21 + be*(22 + 9*be))*k1**4*(-1 + 3*u12**2) +
                       (21 + be*(22 + 9*be))*k2**4*(-1 + 3*u12**2) +
                       4*k1**3*k2*u12*(-21 - 16*be - 3*be**2 + 3*(21 + be*(20 + 7*be))*u12**2) +
                       4*k1*k2**3*u12*(-21 - 16*be - 3*be**2 + 3*(21 + be*(20 + 7*be))*u12**2) +
                       2*k1**2*k2**2*(-21 - 22*be - 3*be**2 + (21 + be*(46 + 21*be))*u12**2 +
                                      18*(7 + 2*be*(3 + be))*u12**4)))/(42.*(k1**2 + k2**2 + 2*k1*k2*u12)**2)

        elif l1 == 0 and l2 == 4:
            return (be**2*(8*k2**4 + 32*k1*k2**3*u12 + 24*k1**2*k2**2*(-1 + 3*u12**2) +
                           16*k1**3*k2*u12*(-3 + 5*u12**2) + k1**4*(3 - 30*u12**2 +
                           35*u12**4)))/(35.*(k1**2 + k2**2 + 2*k1*k2*u12)**2)

        elif l1 == 2 and l2 == 4:
            return (be*(4*(33 + 17*be)*k2**4*(-1 + 3*u12**2) +
                    16*k1*k2**3*u12*(-66 - 29*be + 3*(44 + 21*be)*u12**2) +
                    (33 + 17*be)*k1**4*(3 - 30*u12**2 + 35*u12**4) +
                    2*k1**3*k2*u12*(-3*(99 + 61*be) - 10*(33 + 7*be)*u12**2 + 105*(11 + 5*be)*u12**4) +
                    3*k1**2*k2**2*(-11 - 19*be - 6*(121 + 49*be)*u12**2 +
                    5*(253 + 117*be)*u12**4)))/(77.*(k1**2 + k2**2 + 2*k1*k2*u12)**2)

        elif l1 == 4 and l2 == 4:
            return (9*((5005 + 3*be*(1690 + 643*be))*k1**4*(3 - 30*u12**2 + 35*u12**4) +
                       (5005 + 3*be*(1690 + 643*be))*k2**4*(3 - 30*u12**2 + 35*u12**4) +
                       4*k1**3*k2*u12*(3*(5005 + be*(3770 + 909*be)) - 10*(15015 + be*(13910 + 4767*be))*u12**2 +
                                       175*(1001 + be*(962 + 345*be))*u12**4) +
                       4*k1*k2**3*u12*(3*(5005 + be*(3770 + 909*be)) - 10*(15015 + be*(13910 + 4767*be))*u12**2 +
                                       175*(1001 + be*(962 + 345*be))*u12**4) +
                       2*k1**2*k2**2*(15015 + 9*be*(1690 + 583*be) - 12*(10010 + be*(11440 + 4473*be))*u12**2 -
                                      25*(5005 + 23*be*(130 + 27*be))*u12**4 +
                                      2450*(143 + 5*be*(26 + 9*be))*u12**6)))/(40040.*(k1**2 + k2**2 + 2*k1*k2*u12)**2)

    # First Z1 Z1 Z2 shot noise term in Eq. 91
    def e34o44_1(self, k1, k2):

        l1, l2 = self.l1, self.l2
        b1, b2, be, g2 = self.b1, self.b2, self.be, self.g2

        if (l1 == 0 and l2 == 0):
            if (k1 != k2):
                return ((be/3. + (19*be**2)/45. + be**3/5. + be**4/25. +
                        (25*b2*(3 + be)**2 - 4*(5 + be)*(15 + 7*be)*g2)/(450.*b1**2) +
                         (180*be**2*(7 + 3*be)*k1**9*k2 - 480*be**2*(7 + 3*be)*k1**7*k2**3 +
                          8*(35700 + be*(32900 + 3*be*(4627 + 831*be)))*k1**5*k2**5 -
                          480*be**2*(7 + 3*be)*k1**3*k2**7 + 180*be**2*(7 + 3*be)*k1*k2**9 +
                          45*be**2*(7 + 3*be)*(k1**2 - k2**2)**4*(k1**2 + k2**2)*(np.log((k1 - k2)**2) - 2*np.log(k1 + k2))) /
                         (352800.*b1*k1**5*k2**5)))
            else:
                return ((175*b2*(3 + be)**2 + 14*b1**2*be*(5 + 3*be)*(15 + be*(10 + 3*be)) +
                        2*b1*(1275 + be*(1175 + 9*be*(53 + 9*be))) - 28*(5 + be)*(15 + 7*be)*g2)/(3150.*b1**2))
        if (l1 == 0 and l2 == 2):
            if (k1 != k2):
                return ((be*(4*k1*k2*(45*b1*be**2*k1**10 + 15*b1*(63 + 4*be*(15 + be))*k1**8*k2**2 -
                                      3*b1*(1155 + be*(1070 + 157*be))*k1**6*k2**4 +
                                      (3920*b2*(3 + be) + b1*(31031 + 3*be*(7558 + 1751*be)) +
                        112*b1**2*(105 + be*(230 + 9*be*(17 + 4*be))) - 1792*(7 + 2*be)*g2)*k1**4*k2**6 +
                    15*b1*(63 + 2*(19 - 9*be)*be)*k1**2*k2**8 + 45*b1*be*(2 + 3*be)*k2**10) +
                    45*b1*(k1 - k2)**4*(k1 + k2)**4 *
                    (be**2*k1**4 + (21 + 5*be*(4 + be))*k1**2*k2**2 + be*(2 + 3*be)*k2**4) *
                    (np.log((k1 - k2)**2) - 2*np.log(k1 + k2))))/(141120.*b1**2*k1**5*k2**7))
            else:
                return ((be*(245*b2*(3 + be) + b1*(1841 + 9*be*(146 + 33*be)) +
                             7*b1**2*(105 + be*(230 + 9*be*(17 + 4*be))) - 112*(7 + 2*be)*g2))/(2205.*b1**2))
        if (l1 == 2 and l2 == 2):
            if (k1 != k2):
                return ((4*k1*k2*(315*b1*be**2*(33 + 19*be)*k1**12 -
                                  210*b1*be*(-99 + be*(-33 + 16*be))*k1**10*k2**2 -
                                  21*b1*be*(2640 + 7*be*(473 + 139*be))*k1**8*k2**4 +
                                  4*(4928*b1**2*be**2*(7 + 3*be)*(7 + 6*be) +
                                     b1*(51744 + be*(140525 + 3*be*(102685 + 34648*be))) +
                                     1232*(49*b2*be**2 - (-7 + be)*(21 + 25*be)*g2))*k1**6*k2**6 -
                                  21*b1*be*(2640 + 7*be*(473 + 139*be))*k1**4*k2**8 -
                                  210*b1*be*(-99 + be*(-33 + 16*be))*k1**2*k2**10 + 315*b1*be**2*(33 + 19*be)*k2**12) +
                         315*b1*be*(k1 - k2)**4*(k1 + k2)**4*(k1**2 + k2**2) *
                         (be*(33 + 19*be)*k1**4 + 2*(33 + 5*be*(11 + 4*be))*k1**2*k2**2 + be*(33 + 19*be)*k2**4) *
                         (np.log((k1 - k2)**2) - 2*np.log(k1 + k2)))/(4.346496e6*b1**2*k1**7*k2**7))
            else:
                return ((686*b2*be**2 + 56*b1**2*be**2*(7 + 3*be)*(7 + 6*be) +
                        4*b1*(147 + be*(350 + 9*be*(89 + 30*be))) - 14*(-7 + be)*(21 + 25*be)*g2)/(3087.*b1**2))

        if l1 == 4 and l2 == 4:
            if k1 != k2:
                return (64*be**4)/1225. + (96*be**2*g2)/(1225.*b1**2) + \
                       (be*(1984500*be*(35 + 19*be)*k1**17*k2 - 75600*(-910 + be*(941 + 787*be))*k1**15*k2**3 -
                            5040*(32500 + 38607*be + 8283*be**2)*k1**13*k2**5 +
                            5040*(19630 + 3*be*(22113 + 7519*be))*k1**11*k2**7 +
                            8*(-982800 + be*(-20464323 + 6205981*be))*k1**9*k2**9 +
                            5040*(19630 + 3*be*(22113 + 7519*be))*k1**7*k2**11 -
                            5040*(32500 + 38607*be + 8283*be**2)*k1**5*k2**13 - 75600*(-910 + be*(941 + 787*be))*k1**3*k2**15 +
                            1984500*be*(35 + 19*be)*k1*k2**17 +
                            945*(k1 - k2)**4*(k1 + k2)**4*(k1**2 + k2**2) *
                            (525*be*(35 + 19*be)*k1**8 + 20*(910 + 3*be*(503 + 181*be))*k1**6*k2**2 +
                            2*(2600 + 3*be*(1159 + 991*be))*k1**4*k2**4 + 20*(910 + 3*be*(503 + 181*be))*k1**2*k2**6 +
                            525*be*(35 + 19*be)*k2**8)*(np.log((k1 - k2)**2) - 2*np.log(k1 + k2))))/(5.0226176e9*b1*k1**9*k2**9)
            else:
                return (32*be**2*(2*b1*(3 + be*(4 + 7*b1*be)) + 21*g2))/(8575.*b1**2)

        if l1 == 0 and l2 == 4:
            if k1 != k2:
                return (4*be**2)/35. + (4*be**3)/35. + (8*be**4)/175. + (16*be**2*g2)/(525.*b1**2) - \
                       (be**2*(4*k1*k2*(-75*(77 + 39*be)*k1**10 + 5*(2321 + 1299*be)*k1**8*k2**2 + 10*(649 + 27*be)*k1**6*k2**4 -
                               2*(45683 + 19449*be)*k1**4*k2**6 - 5*(1551 + 109*be)*k1**2*k2**8 - 15*(33 + 67*be)*k2**10) -
                               15*(k1 - k2)**4*(k1 + k2)**4*(5*(77 + 39*be)*k1**4 + 2*(319 + 141*be)*k1**2*k2**2 +
                               (33 + 67*be)*k2**4)*(np.log((k1 - k2)**2) - 2*np.log(k1 + k2))))/(3.4496e6*b1*k1**5*k2**7)
            else:
                return (4*be**2*(3*b1*(31 + 13*be + 7*b1*(5 + be*(5 + 2*be))) + 28*g2))/(3675.*b1**2)

        if l1 == 2 and l2 == 4:
            if k1 != k2:
                return (8*be**3)/35. + (32*be**4)/245. + (8*be*g2)/(35.*b1**2) + (88*be**2*g2)/(735.*b1**2) - \
                       (be*(4*k1*k2*(-165375*be**2*k1**14 - 525*(6006 + be*(6500 + 711*be))*k1**12*k2**2 +
                                     35*(304590 + be*(313196 + 51249*be))*k1**10*k2**4 -
                                     35*(351780 + be*(337792 + 32931*be))*k1**8*k2**6 +
                                     (884884 - be*(3832504 + 6444273*be))*k1**6*k2**8 +
                                     7*(12870 + 7*(19500 - 14501*be)*be)*k1**4*k2**10 +
                                     105*(-2574 + be*(-2860 + 5813*be))*k1**2*k2**12 - 315*be*(520 + 933*be)*k2**14) -
                            105*(k1 - k2)**4*(k1 + k2)**4*(1575*be**2*k1**8 + 10*(3003 + be*(3250 + 933*be))*k1**6*k2**2 +
                                                           2*(4290 + be*(7384 + 4731*be))*k1**4*k2**4 + 2*(1287 + 5*be*(858 + 445*be))*k1**2*k2**6 +
                                                           3*be*(520 + 933*be)*k2**8)*(np.log((k1 - k2)**2) - 2*np.log(k1 + k2))))/(2.5113088e8*b1*k1**7*k2**9)
            else:
                return (8*be*(3*b1*(14 + be*(26 + be*(23 + 7*b1*(7 + 4*be)))) + 7*(21 + 11*be)*g2))/(5145.*b1**2)

    # Second Z1 Z1 Z2 shot noise term in Eq. 91

    def e34o44_2(self, u12, k1, k2):

        l1, l2 = self.l1, self.l2
        b1, b2, be, g2 = self.b1, self.b2, self.be, self.g2

        if (l1 == 0 and l2 == 0):
            return ((147*b2*k1*(k1**2 + k2**2 + 2*k1*k2*u12) *
                    ((15 + be*(10 + 3*be))*k1**2 + 2*(15 + be*(10 + 3*be))*k1*k2*u12 +
                     k2**2*(15 + be*(10 + be + 2*be*u12**2))) -
                     k2**2*(7*b1**2*be*(k2**3*u12*(3*(1 + be)*(35 + be*(28 + 5*be)) +
                                                   4*be**2*(9 + 5*be)*u12**2) +
                                        3*k1**2*k2*u12*(-35 + 49*be + 51*be**2 + 15*be**3 +
                                                        4*(35 + be*(35 + be*(21 + 5*be)))*u12**2) +
                                        k1**3*(-105 - 21*be + 9*be**2 + 5*be**3 +
                                               6*(35 + be*(35 + be*(21 + 5*be)))*u12**2) +
                                        3*k1*k2**2*(-35 - 7*be + 15*be**2 + 3*be**3 +
                                                    4*(35 + be*(49 + 6*be*(4 + be)))*u12**2 + 8*be**2*(3 + be)*u12**4)) -
                            294*g2*k1*(-1 + u12**2)*((15 + be*(10 + 3*be))*k1**2 +
                                                     2*(15 + be*(10 + 3*be))*k1*k2*u12 + k2**2*(15 + be*(10 + be + 2*be*u12**2))) +
                            3*b1*(k1**3*(-315 - 175*be - 49*be**2 + 3*be**3 +
                                         2*(525 + be*(455 + be*(161 + 15*be)))*u12**2 + 24*be**2*(7 + 3*be)*u12**4) +
                                  k1**2*k2*u12*(105 + 385*be + 175*be**2 + 39*be**3 +
                                                4*(525 + be*(455 + be*(245 + 51*be)))*u12**2 + 24*be**2*(7 + 3*be)*u12**4) +
                                  k1*k2**2*(315*(-1 + 8*u12**2) +
                                            be*(-175 + 7*be + 3*be**2 + 4*(595 + be*(224 + 39*be))*u12**2 +
                                                12*be*(35 + 13*be)*u12**4)) +
                                  7*k2**3*u12*(105 + be*(105 + be*(35 + 3*be + 4*(7 + 3*be)*u12**2)))))) /
                    (4410.*b1**2*k1*(k1**2 + k2**2 + 2*k1*k2*u12)**2))

        if (l1 == 0 and l2 == 2):
            return ((231*b2*be*k1*(k1**2 + k2**2 + 2*k1*k2*u12) *
                    (2*(7 + 3*be)*k1**2*(-1 + 3*u12**2) + 2*(7 + 3*be)*k1*k2*u12*(1 + 3*u12**2) +
                     k2**2*(7 + be + (21 + 11*be)*u12**2)) -
                     be*k2**2*(-462*g2*k1*(-1 + u12**2) *
                               (2*(7 + 3*be)*k1**2*(-1 + 3*u12**2) + 2*(7 + 3*be)*k1*k2*u12*(1 + 3*u12**2) +
                                k2**2*(7 + be + (21 + 11*be)*u12**2)) +
                               7*b1**2*(k2**3*u12*(462 + 3*be*(297 + be*(176 + 25*be)) +
                                                   be*(297 + be*(462 + 205*be))*u12**2) +
                                        6*k1**2*k2*u12*(-77 - 11*be + 33*be**2 + 15*be**3 +
                                                        (308 + be*(407 + 5*be*(66 + 19*be)))*u12**2 + 6*be*(33 + be*(22 + 5*be))*u12**4)
                                        + k1**3*(-462 - 33*be - 5*be**3 + 3*(308 + be*(11 + be*(66 + 35*be)))*u12**2 +
                                                 36*be*(33 + be*(22 + 5*be))*u12**4) +
                                        6*k1*k2**2*(-77 - 55*be + 11*be**2 + 3*be**3 +
                                                    (308 + be*(451 + 3*be*(88 + 23*be))) *
                                                    u12**2 + 2*be *
                                                    (99 + 2*be*(55 + 17*be))*u12**4
                                                    )) + 33*b1*(7*k2**3*u12*(21 + 14*be + be**2 + (21 + be*(22 + 9*be))*u12**2) +
                                                                2*k1**2*k2*u12*(-7 - 10*be + 3*be**2 + 2*(119 + be*(116 + 23*be))*u12**2 +
                                                                                2*(105 + 78*be + 28*be**2)*u12**4) +
                                                                k1*k2**2*(-7 + 10*be + be**2 + (385 + be*(290 + 57*be))*u12**2 +
                                                                          8*(63 + 19*be*(3 + be))*u12**4) +
                                                                2*k1**3*(28 + 10*be + (-91 + be*(-40 + 3*be))*u12**2 +
                                                                         2*(105 + 2*be*(39 + 5*be))*u12**4 + 12*be**2*u12**6)))) /
                    (9702.*b1**2*k1*(k1**2 + k2**2 + 2*k1*k2*u12)**2))

        if (l1 == 2 and l2 == 2):
            return ((15015*b2*k1*(k1**2 + k2**2 + 2*k1*k2*u12) *
                    ((21 + be*(22 + 9*be))*k1**2*(-1 + 3*u12**2) +
                     2*k1*k2*u12*(-21 - 16*be - 3*be**2 + 3*(21 + be*(20 + 7*be))*u12**2) +
                     k2**2*(-21 + 63*u12**2 + be*(-22 - be + (66 + 7*be)*u12**2 + 12*be*u12**4))) -
                     5*k2**2*(7*b1**2*be*(k2**3*u12*(-3*(715 + be*(1287 + be*(533 + 25*be))) +
                                                     (11583 + be*(27027 + be*(16809 + 2885*be)))*u12**2 + 120*be**2*(39 + 25*be)*u12**4)
                                          + 3*k1**2*k2*u12*(2431 - be*(1001 + be*(923 + 75*be)) - 8437*u12**2 +
                                                            be*(5291 + 5*be*(1729 + 577*be))*u12**2 +
                                                            12*(1287 + be*(1573 + 2*be*(507 + 125*be)))*u12**4) +
                                          3*k1*k2**2*(1573 + 1001*be - 325*be**2 - 33*be**3 +
                                                      (-7579 + be*(-5291 + 3*be*(793 + 257*be)))*u12**2 +
                                                      4*(3861 + be*(6864 + be*(3679 + 998*be)))*u12**4 + 120*be**2*(26 + 9*be)*u12**6) +
                                          k1**3*(be*(429 - 5*be*(39 + 29*be)) + 3*be*(-2717 + be*(-403 + 245*be))*u12**2 +
                                                 18*(1287 + be*(1716 + be*(1183 + 290*be)))*u12**4 + 429*(11 - 43*u12**2))) -
                              6006*g2*k1*(-1 + u12**2)*((21 + be*(22 + 9*be))*k1**2*(-1 + 3*u12**2) +
                                                        2*k1*k2*u12*(-21 - 16*be - 3*be**2 + 3*(21 + be*(20 + 7*be))*u12**2) +
                                                        k2**2*(-21 + 63*u12**2 + be*(-22 - be + (66 + 7*be)*u12**2 + 12*be*u12**4))) +
                              39*b1*(k1**3*(693 + 605*be + 275*be**2 - 5*be**3 +
                                            (-4389 + be*(-4961 + be*(-1859 + 9*be)))*u12**2 +
                                            2*(3465 + be*(4719 + be*(2079 + 185*be)))*u12**4 + 48*be**2*(33 + 17*be)*u12**6) +
                                     k1*k2**2*(693 + 605*be - 77*be**2 - 5*be**3 -
                                               11*(693 + be*(829 + be*(155 + 3*be)))*u12**2 +
                                               8*(2079 + be*(2970 + be*(1287 + 244*be)))*u12**4 + 72*be**2*(55 + 23*be)*u12**6) +
                                     k1**2*k2*u12*(-(be*(1727 + be*(737 + 41*be))) +
                                                   be*(-583 + be*(1199 + 463*be))*u12**2 +
                                                   4*(3465 + be*(4389 + be*(2607 + 607*be)))*u12**4 + 144*be**2*(11 + 5*be)*u12**6 -
                                                   231*(1 + 17*u12**2)) + 7*k2**3*u12 *
                                     (231*(-1 + 3*u12**2) + be *
                                      (363*(-1 + 3*u12**2) +
                                       be*(-121 - 5*be + (451 + 39*be)*u12**2 + 8*(33 + 17*be)*u12**4)))))) /
                    (252252.*b1**2*k1*(k1**2 + k2**2 + 2*k1*k2*u12)**2))

        if l1 == 0 and l2 == 4:
            return (be**2*(1001*b2*k1*(k1**2 + k2**2 + 2*k1*k2*u12) *
                           (4*k2**2*(-1 + 3*u12**2) + 8*k1*k2*u12*(-3 + 5*u12**2) + k1**2*(3 - 30*u12**2 + 35*u12**4)) +
                           k2**2*(2002*g2*k1*(-1 + u12**2)*(4*k2**2*(-1 + 3*u12**2) + 8*k1*k2*u12*(-3 + 5*u12**2) +
                                                            k1**2*(3 - 30*u12**2 + 35*u12**4)) +
                                  13*b1*(-56*k2**3*u12*(-2*be + (33 + 17*be)*u12**2) -
                                         8*k1*k2**2*(22 - 2*be - (209 + 79*be)*u12**2 + 44*(20 + 9*be)*u12**4) +
                                         3*k1**2*k2*u12*(-165 + 81*be + 2*(605 + 103*be)*u12**2 - (2893 + 1127*be)*u12**4) +
                                         k1**3*(187 + 21*be + 12*(-88 + 15*be)*u12**2 + 3 *
                                                (957 + 43*be)*u12**4 - 10*(385 + 117*be)*u12**6)
                                         ) + 7*b1**2*(4*k2**3*u12*(-143 - 78*be + 45*be**2 - (715 + 3*be*(364 + 155*be))*u12**2) +
                                                      k1**2*k2*u12*(6864 + 3*be*(1417 + 555*be) - 2*(2860 + be*(403 + 765*be))*u12**2 -
                                                      5*(2288 + be*(3497 + 1035*be))*u12**4) +
                                                      k1**3*(-572 + 273*be + 135*be**2 + 12*(715 + be*(286 + 105*be))*u12**2 -
                                                             5*(2288 + be*(767 + 405*be))*u12**4 - 350*be*(13 + 3*be)*u12**6) +
                                                      k1*k2**2*(13*be*(95 + 82*u12**2 - 1257*u12**4) + 9*be**2*(37 + 46*u12**2 - 643*u12**4) -
                                                                1144*(-2 + u12**2 + 10*u12**4))))))/(70070.*b1**2*k1*(k1**2 + k2**2 + 2*k1*k2*u12)**2)

        if l1 == 2 and l2 == 4:
            return (91*b2*be*k1*(k1**2 + k2**2 + 2*k1*k2*u12) *
                    (2*(33 + 17*be)*k1**2*(3 - 30*u12**2 + 35*u12**4) +
                     2*k1*k2*u12*(-3*(99 + 61*be) - 10*(33 + 7*be)*u12**2 + 105*(11 + 5*be)*u12**4) +
                     k2**2*(-33 - 19*be - 6*(99 + 49*be)*u12**2 + 15*(77 + 39*be)*u12**4)) -
                    be*k2**2*(-182*g2*k1*(-1 + u12**2)*(2*(33 + 17*be)*k1**2*(3 - 30*u12**2 + 35*u12**4) +
                                                        2*k1*k2*u12*(-3*(99 + 61*be) - 10*(33 + 7*be)*u12**2 + 105*(11 + 5*be)*u12**4) +
                                                        k2**2*(-33 - 19*be - 6*(99 + 49*be)*u12**2 + 15*(77 + 39*be)*u12**4)) +
                              7*b1**2*(2*k1**2*k2*u12*(-3*(286 + be*(455 + 4*be*(181 + 75*be))) -
                                                       (11154 + be*(16588 + be*(11788 + 2655*be)))*u12**2 +
                                                       5*(3432 + be*(4043 + 2*be*(2017 + 639*be)))*u12**4 + 105*be*(130 + 3*be*(30 + 7*be))*u12**6) +
                                       k1**3*(1716 + 247*be - 132*be**2 - 75*be**3 - 6*(2574 + be*(949 + be*(1003 + 420*be)))*u12**2 +
                                              5*(3432 + be*(-2249 + be*(-812 + 225*be)))*u12**4 + 70*be*(390 + be*(295 + 69*be))*u12**6) +
                                       2*k1*k2**2*(858 + 637*be - 323*be**2 - 81*be**3 -
                                                   (12870 + be*(17264 + be*(8881 + 2088*be)))*u12**2 +
                                                   (17160 + be*(18889 + 3*be*(3263 + 813*be)))*u12**4 + 15*be*(910 + 3*be*(335 + 106*be))*u12**6)
                                       + k2**3*u12*(1716*(-3 + 5*u12**2) +
                                                    be*(-8411 - 4182*be - 495*be**2 + 2*(6097 + 3*(712 - 85*be)*be)*u12**2 +
                                                        15*(455 + 3*be*(230 + 97*be))*u12**4))) +
                              b1*(k1*k2**2*(-429 - 1274*be - 125*be**2 - 2*(32175 + be*(40300 + 8753*be))*u12**2 -
                                            (79365 + be*(19058 + 16461*be))*u12**4 + 156*(2310 + be*(2075 + 687*be))*u12**6) +
                                  6*k1**2*k2*u12*(4290 + 3*(754 - 167*be)*be - (34320 + be*(37024 + 5891*be))*u12**2 +
                                                  (16016 + be*(33930 + 4547*be))*u12**4 + 5*(10010 + be*(7592 + 2805*be))*u12**6) +
                                  7*k2**3*u12*(429*(-5 - 6*u12**2 + 35*u12**4) + 78*be*(-29 - 30*u12**2 + 195*u12**4) +
                                               be**2*(-125 - 2182*u12**2 + 5787*u12**4)) +
                                  2*k1**3*(429*(-11 + 114*u12**2 - 369*u12**4 + 350*u12**6) +
                                  3*be**2*(1 + 6*u12**2)*(-22 - 513*u12**2 + 590*u12**4 + 525*u12**6) +
                                  52*be*(-43 + 408*u12**2 - 2016*u12**4 + 2365*u12**6)))))/(28028.*b1**2*k1*(k1**2 + k2**2 + 2*k1*k2*u12)**2)

        if l1 == 4 and l2 == 4:
            return (1071*b2*k1*(k1**2 + k2**2 + 2*k1*k2*u12) *
                    ((5005 + 3*be*(1690 + 643*be))*k1**2*(3 - 30*u12**2 + 35*u12**4) +
                     2*k1*k2*u12*(3*(5005 + be*(3770 + 909*be)) - 10*(15015 + be*(13910 + 4767*be))*u12**2 +
                                  175*(1001 + be*(962 + 345*be))*u12**4) +
                     k2**2*(5005*(3 - 30*u12**2 + 35*u12**4) + 5070*be*(3 - 30*u12**2 + 35*u12**4) +
                            3*be**2*(583 - 5964*u12**2 - 1725*u12**4 + 12250*u12**6))) -
                    9*k2**2*(7*b1**2*be*(k2**3*u12*(62985 + 139077*be + 81787*be**2 + 13695*be**3 -
                                                    2*(535925 + 3*be*(405195 + be*(246347 + 40815*be)))*u12**2 +
                                                    25*(54145 + 9*be*(13685 + 9*be*(731 + 31*be)))*u12**4 + 4900*be**2*(119 + 75*be)*u12**6) +
                                         k1*k2**2*(-129285 - 38913*be + 66385*be**2 + 15717*be**3 +
                                                   2*(772395 + be*(373167 - 41*be*(7633 + 1677*be)))*u12**2 -
                                                   (5795725 + 3*be*(2602275 + be*(996013 + 278121*be)))*u12**4 +
                                                   100*(54145 + be*(94605 + 2*be*(21913 + 5709*be)))*u12**6 + 68600*be**2*(17 + 6*be)*u12**8) +
                                         k1**3*(11*be*(-2703 + be*(1207 + 615*be)) - 36*be*(-13600 + 3*be*(629 + 770*be))*u12**2 -
                                                5*(730405 + 3*be*(210239 + be*(109361 + 21465*be)))*u12**4 +
                                                350*(7735 + be*(9945 + be*(6749 + 1707*be)))*u12**6 + 3315*(-39 + 428*u12**2)) +
                                         k1**2*k2*u12*(be*(165291 + be*(161449 + 41085*be)) -
                                                       6*be*(306935 + be*(389249 + 122445*be))*u12**2 +
                                                       15*(-396695 + be*(-171139 + 3*be*(-4267 + 4185*be)))*u12**4 +
                                                       700*(7735 + be*(9435 + be*(6239 + 1575*be)))*u12**6 + 1105*(-177 + 1598*u12**2))) -
                             238*g2*k1*(-1 + u12**2)*((5005 + 3*be*(1690 + 643*be))*k1**2*(3 - 30*u12**2 + 35*u12**4) +
                                                      2*k1*k2*u12*(3*(5005 + be*(3770 + 909*be)) - 10*(15015 + be*(13910 + 4767*be))*u12**2 +
                                                      175*(1001 + be*(962 + 345*be))*u12**4) +
                                                      k2**2*(5005*(3 - 30*u12**2 + 35*u12**4) + 5070*be*(3 - 30*u12**2 + 35*u12**4) +
                                                             3*be**2*(583 - 5964*u12**2 - 1725*u12**4 + 12250*u12**6))) +
                             17*b1*(7*k2**3*u12*(15015 + 22815*be + 9285*be**2 + 781*be**3 -
                                    6*(25025 + 3*be*(12675 + be*(5203 + 467*be)))*u12**2 +
                                    5*(35035 + 3*be*(17745 + (3811 - 1093*be)*be))*u12**4 + 700*be**2*(105 + 53*be)*u12**6) +
                                    k1**2*k2*u12*(3*(5005 + be*(35685 + be*(19195 + 2691*be))) -
                                                  6*(-25025 + be*(99515 + be*(65405 + 15017*be)))*u12**2 -
                                                  (2827825 + be*(2664025 + 27*be*(58957 + 13333*be)))*u12**4 +
                                                  100*(35035 + be*(44317 + 3*be*(8193 + 1703*be)))*u12**6 + 29400*be**2*(15 + 7*be)*u12**8) +
                                    k1*k2**2*(be*(-38025 + be*(2289 + 781*be)) + 2*be*(421395 + be*(70731 + 7261*be))*u12**2 -
                                              (4129125 + be*(5433025 + 3*be*(713625 + 131701*be)))*u12**4 +
                                              20*(210210 + be*(295295 + be*(93342 + 9589*be)))*u12**6 + 700*be**2*(1575 + 661*be)*u12**8 +
                                              45045*(-1 + 18*u12**2)) + k1**3 *
                                    (5005*(-3 + 10*u12**2)*(3 - 30*u12**2 + 35*u12**4) +
                                     2535*be*(-5 + 26*u12**2)*(3 - 30*u12**2 + 35*u12**4) +
                                     be**3*(1 + 6*u12**2)*(781 - 8406*u12**2 - 16395*u12**4 + 37100*u12**6) +
                                     3*be**2*(-4621 + 72228*u12**2 - 335433*u12**4 + 228850*u12**6 + 147000*u12**8)))))/(9.52952e6*b1**2*k1*(k1**2 + k2**2 + 2*k1*k2*u12)**2)

    # First Z1^2 Z2^2 term in Eq. 25
    def e44o44_1(self, u12, k1, k2):

        l1, l2 = self.l1, self.l2
        b1, b2, be, g2 = self.b1, self.b2, self.be, self.g2

        if (l1 == 0 and l2 == 0):
            return ((147147*b2**2*(15 + be*(10 + 3*be)) +
                    (2002*b2*k2**2*(294*(15 + be*(10 + 3*be))*g2*k1*(-1 + u12**2) +
                                    7*b1**2*be*((105 + be*(21 - be*(9 + 5*be)))*k1 -
                                                3*(1 + be)*(35 + be*(28 + 5*be))*k2*u12 -
                                                6*(35 + be*(35 + be*(21 + 5*be)))*k1*u12**2 - 4*be**2*(9 + 5*be)*k2*u12**3) +
                                    3*b1*(k1*(315 + 175*be + 49*be**2 - 3*be**3 -
                                              2*(525 + be*(455 + be*(161 + 15*be)))*u12**2 - 24*be**2*(7 + 3*be)*u12**4) +
                                          7*k2*u12*(-105 + be*(-105 - be*(35 + 3*be + 4*(7 + 3*be)*u12**2)))))) /
                     (k1*(k1**2 + k2**2 + 2*k1*k2*u12)) +
                     (k2**4*(588588*(15 + be*(10 + 3*be))*g2**2*k1**2*(-1 + u12**2)**2 +
                             49*b1**4*be**2*(k1**2*(9009 - 858*be**2 + 105*be**4 +
                                                    4*(-6006 + be*(-1287 + be*(1144 + 105*be*(13 + 4*be))))*u12**2 +
                                                    8*(3003 + be*(3861 + be*(3289 + 105*be*(13 + 2*be))))*u12**4) +
                                             2*k1*k2*u12*(3003*(-1 + 4*u12**2) + 2574*be*(-1 + 11*u12**2) +
                                                          910*be**3*(3 + 11*u12**2 + 4*u12**4) + 105*be**4*(5 + 20*u12**2 + 8*u12**4) +
                                                          286*be**2*(11 + 78*u12**2 + 16*u12**4)) +
                                             k2**2*(3003*(1 + 2*u12**2) + 5148*be*(1 + 4*u12**2) +
                                                    780*be**3*(1 + 12*u12**2 + 8*u12**4) + 286*be**2*(11 + 78*u12**2 + 16*u12**4) +
                                                    15*be**4*(5 + 90*u12**2 + 120*u12**4 + 16*u12**6))) +
                             182*b1**3*be*(k1**2*(3465 + 3*be**2*(-132 + be*(-44 + 5*be)) +
                                                  2*(-9240 + be*(-6006 + be*(-1485 + be*(176 + 135*be))))*u12**2 +
                                                  12*(1925 + be*(2618 + be*(1617 + 4*be*(154 + 25*be))))*u12**4 +
                                                  144*be**2*(33 + be*(22 + 5*be))*u12**6) +
                                           7*k2**2*u12**2*(1155 + be *
                                                           (2772 + 3*be*(726 + 5*be*(44 + 5*be)) + 8*be*(99 + 5*be*(22 + 5*be))*u12**2 +
                                                            40*be**3*u12**4)) +
                                           2*k1*k2*u12*(1155*(-5 + 12*u12**2) + 462*be*(-13 + 55*u12**2) +
                                                        308*be**3*(1 + 18*u12**2 + 16*u12**4) + 99*be**2*(-11 + 161*u12**2 + 60*u12**4) +
                                                        5*be**4*(18 + 191*u12**2 + 208*u12**4 + 24*u12**6))) +
                             143*b1**2*(14*k1*k2*u12*(-945 +
                                                      3*be*(-280 - 70*be + be**3 + 14*(1 + be)*(35 + be*(28 + 5*be))*g2) +
                                                      14*(225 + 3*be*(90 + be*(36 + be*(6 + be))) +
                                                          be*(-105 + be*(-189 + be*(-63 + 5*be)))*g2)*u12**2 -
                                                      8*be**2*(-168 + 63*be*(-2 + g2) + be**2*(-19 + 35*g2))*u12**4 + 48*be**4*u12**6)
                                        + 49*k2**2*u12**2*(315 +
                                                           be*(420 + 3*be*(70 + be*(12 + be)) + 24*be*(7 + be*(6 + be))*u12**2 +
                                                               8*be**3*u12**4)) +
                                        k1**2*(315*(3 - 10*u12**2)**2 -
                                               420*be*(-3 + 49*g2 + (34 - 147*g2)*u12**2 + 2*(-40 + 49*g2)*u12**4) -
                                               42*be**2*(-9 + 98*g2 + 2*(50 - 539*g2)*u12**2 + 4*(-73 + 245*g2)*u12**4 -
                                                         240*u12**6) - 36*be**3 *
                                               (1 - 49*g2 + (2 - 637*g2)*u12**2 + 14*(-4 + 49*g2)*u12**4 - 192*u12**6) +
                                               be**4*(1 + 6*u12**2)*(3 + 980*g2 + 14*(3 - 70*g2)*u12**2 + 152*u12**4 + 48*u12**6)))
                             - 12012*b1*g2*k1*(-1 + u12**2) *
                             (k1*(-315 - 175*be - 49*be**2 + 3*be**3 +
                              2*(525 + be*(455 + be*(161 + 15*be)))*u12**2 + 24*be**2*(7 + 3*be)*u12**4) +
                              7*k2*u12*(105 + be*(105 + be*(35 + 3*be + 4*(7 + 3*be)*u12**2)))))) /
                     (k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))/(8.82882e6*b1**4))

        if (l1 == 0 and l2 == 2):
            return ((be*(42042*b2**2*(7 + 3*be)*k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2*(-1 + 3*u12**2) -
                         182*b2*k1*k2**2*(k1**2 + k2**2 + 2*k1*k2*u12) *
                         (-924*(7 + 3*be)*g2*k1*(1 - 4*u12**2 + 3*u12**4) +
                         66*b1*(7*k2*u12*(-2*be + (21 + be*(20 + 3*be))*u12**2 + 2*be**2*u12**4) +
                                k1*(28 + 10*be + (-91 + be*(-40 + 3*be))*u12**2 +
                                    2*(105 + 2*be*(39 + 5*be))*u12**4 + 12*be**2*u12**6)) +
                          7*b1**2*(k1*(-462 - 33*be - 5*be**3 + 3*(308 + be*(11 + be*(66 + 35*be)))*u12**2 +
                                       36*be*(33 + be*(22 + 5*be))*u12**4) +
                                   2*k2*u12*(231 + 297*be*(1 + u12**2) + 99*be**2*(1 + 4*u12**2) +
                                             5*be**3*(3 + u12**2)*(1 + 6*u12**2)))) +
                         k2**4*(168168*(7 + 3*be)*g2**2*k1**2*(-1 + u12**2)**2*(-1 + 3*u12**2) -
                                24024*b1*g2*k1*(-1 + u12**2) *
                                (7*k2*u12*(-2*be + (21 + be*(20 + 3*be))*u12**2 + 2*be**2*u12**4) +
                                 k1*(28 + 10*be + (-91 + be*(-40 + 3*be))*u12**2 +
                                     2*(105 + 2*be*(39 + 5*be))*u12**4 + 12*be**2*u12**6)) +
                                49*b1**4*be*(4*k1**2*(-39*(-33 + be**2) +
                                                      (-4719 + be*(-1287 + be*(-572 + 105*be*(1 + be))))*u12**2 +
                                                      (4719 + be*(2145 + be*(2951 + 105*be*(17 + 4*be))))*u12**4 +
                                                      12*be*(286 + be*(260 + 7*be*(15 + 2*be)))*u12**6) +
                                             2*k1*k2*u12*(858*(-5 + 11*u12**2) + 429*be*(-11 + 35*u12**2 + 16*u12**4) +
                                                          13*be**2*(-31 + 747*u12**2 + 964*u12**4) +
                                                          21*be**4*(5 + 55*u12**2 + 64*u12**4 + 8*u12**6) +
                                                          5*be**3*(87 + 1069*u12**2 + 1220*u12**4 + 144*u12**6)) +
                                             k2**2*(429*(1 + 11*u12**2) +
                                                    be*(be*(572 + 15*be*(10 + be)) + 3*be*(3952 + 15*be*(98 + 13*be))*u12**2 +
                                                        4*(858 + be*(2353 + 15*be*(122 + 27*be)))*u12**4 +
                                                        24*be**2*(30 + 23*be)*u12**6 + 858*(1 + 15*u12**2)))) -
                                26*b1**2*(-49*k2**2*u12**2*(231*(1 + 3*u12**2) +
                                                            be*(3*(55 + be*(11 + be)) + 3*(341 + be*(165 + 23*be))*u12**2 +
                                                                4*be*(33 + 17*be)*u12**4)) +
                                          14*k1*k2*u12*(231*(-1 + 3*u12**2 - 30*u12**4 + 14*g2*(-1 + u12**2)) -
                                                        33*be**2*(1 + 9*u12**2 + 98*u12**4 + 32*u12**6 + 42*g2*(1 + 3*u12**2 - 4*u12**4)) +
                                                        33*be*(-13 + 27*u12**2 - 266*u12**4 + 126*g2*(-1 + u12**4)) +
                                                        be**3*(1 + 6*u12**2)*(-3 - 69*u12**2 - 68*u12**4 + 70*g2*(-3 + 2*u12**2 + u12**4)))
                                          + k1**2*(231*(15 + 196*g2 - (71 + 588*g2)*u12**2 + 8*(20 + 49*g2)*u12**4 -
                                                        300*u12**6) - 33*be**2 *
                                                   (1 + (3 + 588*g2)*u12**2 + 84*(1 + 21*g2)*u12**4 + (652 - 2352*g2)*u12**6 +
                                                    240*u12**8) + 33*be *
                                                   (27 - 251*u12**2 + 680*u12**4 - 2220*u12**6 +
                                                    98*g2*(-1 + u12)*(1 + u12)*(-1 + u12**2 + 36*u12**4)) +
                                                   be**3*(-((1 + 6*u12**2)**2*(3 + 69*u12**2 + 68*u12**4)) +
                                                          490*g2*(1 - 22*u12**2 - 15*u12**4 + 36*u12**6)))) +
                                14*b1**3*(k1*k2*u12*(12012*(-5 + 12*u12**2) + 429*be*(-133 + 373*u12**2 + 432*u12**4) +
                                                     429*be**2*(-9 + 161*u12**2 + 688*u12**4) +
                                                     5*be**4*(81 + 1927*u12**2 + 5108*u12**4 + 1704*u12**6) +
                                                     13*be**3*(97 + 3531*u12**2 + 10252*u12**4 + 1800*u12**6)) +
                                          k1**2*(6006*(3 - 16*u12**2 + 20*u12**4) +
                                                 15*be**4*(1 + 6*u12**2)*(1 + 57*u12**2 + 128*u12**4 + 24*u12**6) +
                                                 429*be*(-9 - 61*u12**2 + 46*u12**4 + 360*u12**6) +
                                                 429*be**2*(-1 - 21*u12**2 + 34*u12**4 + 408*u12**6) +
                                                 13*be**3*(21 - 131*u12**2 + 2214*u12**4 + 5016*u12**6 + 720*u12**8)) +
                                          14*k2**2*u12**2*(3003 + be *
                                                           (1287*(5 + 3*u12**2) +
                                                            be*(429*(11 + 19*u12**2) +
                                                                5*be*(273 + 30*be + (1027 + 185*be)*u12**2 + 4*(39 + 25*be)*u12**4)))))))) /
                    (1.765764e6*b1**4*k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))

        if (l1 == 2 and l2 == 2):
            return ((5*(357357*b2**2*(21 + be*(22 + 9*be))*k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2*(-1 + 3*u12**2) -
                        238*b2*k1*k2**2*(k1**2 + k2**2 + 2*k1*k2*u12) *
                        (-6006*(21 + be*(22 + 9*be))*g2*k1*(1 - 4*u12**2 + 3*u12**4) +
                        7*b1**2*be*((4719 + be*(429 - 5*be*(39 + 29*be)))*k1 -
                                    3*(715 + be*(1287 + be*(533 + 25*be)))*k2*u12 +
                                    3*(-6149 + be*(-2717 + be*(-403 + 245*be)))*k1*u12**2 +
                                    (11583 + be*(27027 + be*(16809 + 2885*be)))*k2*u12**3 +
                                    18*(1287 + be*(1716 + be*(1183 + 290*be)))*k1*u12**4 +
                                    120*be**2*(39 + 25*be)*k2*u12**5) +
                         39*b1*(k1*(693 + 605*be + 275*be**2 - 5*be**3 +
                                    (-4389 + be*(-4961 + be*(-1859 + 9*be)))*u12**2 +
                                    2*(3465 + be*(4719 + be*(2079 + 185*be)))*u12**4 + 48*be**2*(33 + 17*be)*u12**6)
                                + 7*k2*u12*(231*(-1 + 3*u12**2) +
                                            be*(363*(-1 + 3*u12**2) +
                                            be*(-121 - 5*be + (451 + 39*be)*u12**2 + 8*(33 + 17*be)*u12**4))))) +
                        k2**4*(1429428*(21 + be*(22 + 9*be))*g2**2*k1**2*(-1 + u12**2)**2*(-1 + 3*u12**2) +
                               49*b1**4*be**2*(k1**2*(-3*(21879 - 374*be**2 + 63*be**4) +
                                                      7*(36465 + be*(-2652 + be*(-5882 + 15*be*(-68 + 31*be))))*u12**2 +
                                                      28*(-14586 + be*(-3315 + be*(3944 + 15*be*(323 + 100*be))))*u12**4 +
                                                      48*(7293 + be*(11713 + be*(10880 + 7*be*(663 + 101*be))))*u12**6) +
                                               2*k1*k2*u12*(7293*(1 - 7*u12**2 + 24*u12**4) + 2652*be*(2 - 21*u12**2 + 189*u12**4) +
                                                            21*be**4*(5 + 805*u12**2 + 2224*u12**4 + 728*u12**6) +
                                                            68*be**3*(-30 + 1105*u12**2 + 3137*u12**4 + 954*u12**6) +
                                                            34*be**2*(-211 + 2277*u12**2 + 13204*u12**4 + 2160*u12**6)) +
                                               k2**2*(7293*(-1 + 7*u12**2 + 12*u12**4) + 2652*be*(-5 + 39*u12**2 + 136*u12**4) +
                                                      204*be**3*(-5 + 135*u12**2 + 1040*u12**4 + 552*u12**6) +
                                                      34*be**2*(-211 + 2277*u12**2 + 13204*u12**4 + 2160*u12**6) +
                                                      9*be**4*(-5 + 435*u12**2 + 3940*u12**4 + 3960*u12**6 + 448*u12**8))) +
                               238*b1**3*be*(k1**2*(3*(-4719 + be*(858 + be*(260 + (134 - 5*be)*be))) +
                                                    (102531 + be*(37752 + be*(858 + be*(-3232 + 315*be))))*u12**2 +
                                                    6*(-42328 + be*(-40183 + be*(-12597 + be*(863 + 925*be))))*u12**4 +
                                                    12*(19305 + be*(34749 + be*(24687 + be*(9821 + 1698*be))))*u12**6 +
                                                    144*be**2*(390 + be*(295 + 69*be))*u12**8) +
                                             7*k2**2*u12**2*(429*(-5 + 27*u12**2) +
                                                             be*(3*(6 + be)*(-286 + 5*(-26 + be)*be) +
                                                                 (36036 + be*(33618 + 5*be*(2308 + 323*be)))*u12**2 +
                                                                 8*be*(1170 + be*(1500 + 379*be))*u12**4 + 504*be**3*u12**6)) +
                                             2*k1*k2*u12*(39*be**2*(-1 + 15*u12**2)*(-41 + 431*u12**2 + 120*u12**4) +
                                                          429*be*(47 - 320*u12**2 + 777*u12**4) +
                                                          7*be**3*(-89 + 528*u12**2 + 13261*u12**4 + 9540*u12**6) +
                                                          be**4*(-45 + 2270*u12**2 + 17281*u12**4 + 15144*u12**6 + 1512*u12**8) +
                                                          858*(23 + 54*u12**2*(-2 + 3*u12**2)))) -
                               18564*b1*g2*k1*(-1 + u12**2) *
                               (k1*(693 + 605*be + 275*be**2 - 5*be**3 +
                                    (-4389 + be*(-4961 + be*(-1859 + 9*be)))*u12**2 +
                                    2*(3465 + be*(4719 + be*(2079 + 185*be)))*u12**4 + 48*be**2*(33 + 17*be)*u12**6)
                                + 7*k2*u12*(231*(-1 + 3*u12**2) +
                                be*(363*(-1 + 3*u12**2) +
                                    be*(-121 - 5*be + (451 + 39*be)*u12**2 + 8*(33 + 17*be)*u12**4)))) +
                               17*b1**2*(49*k2**2*u12**2*(9009*(-1 + 3*u12**2) + 18876*be*(-1 + 3*u12**2) +
                                                          858*be**2*(-11 + 41*u12**2 + 24*u12**4) + 156*be**3*(-5 + 39*u12**2 + 136*u12**4) +
                                                          be**4*(-33 + 771*u12**2 + 3992*u12**4 + 1080*u12**6)) +
                                         14*k1*k2*u12*(9009*(3 - 19*u12**2 + 30*u12**4) -
                                                       858*be*(-44 + 35*g2 + 2*(165 - 112*g2)*u12**2 + 27*(-22 + 7*g2)*u12**4) -
                                                       858*be**2*(-11 + 63*g2 + 3*(43 - 168*g2)*u12**2 + (-304 + 441*g2)*u12**4 -
                                                                  192*u12**6) - 546*be**3 *
                                                       (41*g2 + 2*(5 - 236*g2)*u12**2 + (-78 + 311*g2)*u12**4 + 8*(-34 + 15*g2)*u12**6) +
                                                       be**4*(-70*g2*(15 - 592*u12**2 - 23*u12**4 + 600*u12**6) +
                                                              (1 + 6*u12**2)*(-33 + 771*u12**2 + 3992*u12**4 + 1080*u12**6))) +
                                         k1**2*(9009*(3 - 10*u12**2)**2*(-1 + 3*u12**2) -
                                                1716*be*(33 - 539*g2 + (-473 + 2646*g2)*u12**2 + 7*(286 - 679*g2)*u12**4 +
                                                         6*(-440 + 441*g2)*u12**6) -
                                                858*be**2*(39 - 98*g2 + 5*(-65 + 392*g2)*u12**2 + 2*(782 - 4459*g2)*u12**4 +
                                                           36*(-69 + 196*g2)*u12**6 - 1440*u12**8) -
                                                156*be**3*(-5 + 49*u12**2 + 298*u12**4 - 2144*u12**6 - 6528*u12**8 +
                                                           49*g2*(5 + 26*u12**2 - 577*u12**4 + 546*u12**6)) +
                                                be**4*(-980*g2*(-1 + u12)*(1 + u12)*(-29 + 147*u12**2 + 1044*u12**4) +
                                                       (1 + 6*u12**2)**2*(-33 + 771*u12**2 + 3992*u12**4 + 1080*u12**6))))))) /
                    (6.0035976e7*b1**4*k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))

        if l1 == 0 and l2 == 4:
            return (be**2*(119119*b2**2*k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2*(3 - 30*u12**2 + 35*u12**4) -
                    238*b2*k1*k2**2*(k1**2 + k2**2 + 2*k1*k2*u12) *
                           (-2002*g2*k1*(-3 + 33*u12**2 - 65*u12**4 + 35*u12**6) +
                            7*b1**2*(k2*u12*(-2288 - 2613*be - 555*be**2 + 2*(2860 + be*(2509 + 255*be))*u12**2 +
                                             25*be*(91 + 69*be)*u12**4) +
                                     k1*(572 - 273*be - 135*be**2 - 12*(715 + be*(286 + 105*be))*u12**2 +
                                         5*(2288 + be*(767 + 405*be))*u12**4 + 350*be*(13 + 3*be)*u12**6)) +
                            13*b1*(7*k2*u12*(-55 - 21*be - 6*(11 + 9*be)*u12**2 + 5*(77 + 39*be)*u12**4) +
                                   k1*(-187 - 21*be + 12*(88 - 15*be)*u12**2 - 3*(957 + 43*be)*u12**4 + 10*(385 + 117*be)*u12**6)))
                           + k2**4*(476476*g2**2*k1**2*(-1 + u12**2)**2*(3 - 30*u12**2 + 35*u12**4) -
                                    6188*b1*g2*k1*(-1 + u12**2)*(7*k2*u12 *
                                                                 (-55 - 21*be - 6*(11 + 9*be)*u12**2 + 5*(77 + 39*be)*u12**4) +
                                                                 k1*(-187 - 21*be + 12*(88 - 15*be)*u12**2 - 3*(957 + 43*be)*u12**4 + 10*(385 + 117*be)*u12**6))
                                    + 238*b1**3*(2*k1*k2*u12*(2002 + 3848*be - 486*be**2 - 305*be**3 -
                                                              (38610 + be*(44408 + 3*be*(4316 + 745*be)))*u12**2 +
                                                              3*(22880 + be*(26260 + be*(10308 + 2075*be)))*u12**4 +
                                                              25*be*(1092 + be*(1182 + 323*be))*u12**6) +
                                                 k1**2*(be*(1027 + (294 - 55*be)*be) + 2*be*(2275 + 6*(43 - 70*be)*be)*u12**2 -
                                                        3*(35464 + be*(20891 + be*(7738 + 625*be)))*u12**4 +
                                                        2*(57200 + be*(38558 + be*(19122 + 4085*be)))*u12**6 +
                                                        20*be*(2275 + 6*be*(260 + 53*be))*u12**8 + 572*(-5 + 47*u12**2)) +
                                                 7*k2**2*u12**2*(1144*(-1 + 5*u12**2) +
                                                                 be*(-3*(13 + 5*be)*(59 + 15*be) + 2*(4693 + 15*be*(158 + 15*be))*u12**2 +
                                                                     5*(455 + 3*be*(230 + 97*be))*u12**4))) +
                                    49*b1**4*(k2**2*(9724*(-1 + 3*u12**2) + 442*be*(-37 + 82*u12**2 + 195*u12**4) +
                                                     680*be**3*(-5 - 21*u12**2 + 141*u12**4 + 53*u12**6) +
                                                     51*be**2*(-213 - 24*u12**2 + 3247*u12**4 + 350*u12**6) +
                                                     15*be**4*(-25 - 240*u12**2 + 975*u12**4 + 1138*u12**6)) +
                                              2*k1**2*(9724*(1 - 6*u12**2 + 6*u12**4) +
                                                       1190*be**3*u12**2*(-11 - 12*u12**2 + 57*u12**4 + 14*u12**6) +
                                                       2652*be*(u12**2 - 46*u12**4 + 65*u12**6) +
                                                       35*be**4*(-7 - 122*u12**2 + 93*u12**4 + 376*u12**6 + 56*u12**8) +
                                                       51*be**2*(37 - 414*u12**2 - 1143*u12**4 + 2500*u12**6 + 700*u12**8)) +
                                              2*k1*k2*u12*(19448*(-2 + 3*u12**2) +
                                                           be*(-3*be*(6171 + 5*be*(816 + 175*be)) - 6*be*(12529 + 15*be*(187 + 35*be))*u12**2 +
                                                               3*(57460 + be*(76449 + 5*be*(6596 + 1533*be)))*u12**4 +
                                                               30*be*(1190 + be*(1479 + 350*be))*u12**6 - 884*(47 + 28*u12**2)))) -
                                    17*b1**2*(49*k2**2*u12**2*(715 + 962*be + 111*be**2 + 2*(-1287 + be*(-1066 + 69*be))*u12**2 -
                                                               (5005 + 3*be*(1690 + 643*be))*u12**4) +
                                              14*k1*k2*u12*(143*(-15 + 224*g2 + 8*(1 - 98*g2)*u12**2 + 7*(3 + 80*g2)*u12**4 - 350*u12**6) +
                                                            26*be*(-5 + 1407*g2 + (74 - 4109*g2)*u12**2 + 7*(-27 + 211*g2)*u12**4 +
                                                                   5*(-312 + 245*g2)*u12**6) +
                                                            3*be**2*(37 + 268*u12**2 - 367*u12**4 - 3858*u12**6 +
                                                                     70*g2*(37 - 71*u12**2 - 81*u12**4 + 115*u12**6))) +
                                              k1**2*(143*(-83 + 370*u12**2 - 1359*u12**4 + 2220*u12**6 - 3500*u12**8 +
                                                          784*g2*(-1 + 16*u12**2 - 35*u12**4 + 20*u12**6)) +
                                                     3*be**2*(-((1 + 6*u12**2)**2*(-37 - 46*u12**2 + 643*u12**4)) +
                                                              980*g2*(9 + 75*u12**2 - 219*u12**4 + 65*u12**6 + 70*u12**8)) +
                                                     26*be*(-((1 + 6*u12**2)*(47 - 8*u12**2 - 309*u12**4 + 1950*u12**6)) +
                                                            98*g2*(21 + 243*u12**2 - 559*u12**4 - 55*u12**6 + 350*u12**8)))))))/(1.667666e7*b1**4*k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2)

        if l1 == 2 and l2 == 4:
            return (be*(411502*b2**2*(33 + 17*be)*k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2*(3 - 30*u12**2 + 35*u12**4) -
                    4522*b2*k1*k2**2*(k1**2 + k2**2 + 2*k1*k2*u12) *
                        (364*(33 + 17*be)*g2*k1*(3 - 33*u12**2 + 65*u12**4 - 35*u12**6) +
                         2*b1*(7*k2*u12*(429 + 416*be - 66*be**2 - 3*(3432 + be*(3484 + 513*be))*u12**2 +
                                         5*(3003 + 118*be*(26 + 3*be))*u12**4 + 1575*be**2*u12**6) +
                               k1*(429*(-11 + 114*u12**2 - 369*u12**4 + 350*u12**6) +
                                   3*be**2*(1 + 6*u12**2)*(-22 - 513*u12**2 + 590*u12**4 + 525*u12**6) +
                                   52*be*(-43 + 408*u12**2 - 2016*u12**4 + 2365*u12**6))) +
                         7*b1**2*(k1*(1716 + 247*be - 132*be**2 - 75*be**3 -
                                      6*(2574 + be*(949 + be*(1003 + 420*be)))*u12**2 +
                                      5*(3432 + be*(-2249 + be*(-812 + 225*be)))*u12**4 + 70*be*(390 + be*(295 + 69*be))*u12**6) +
                         2*k2*u12*(858*(-3 + 5*u12**2) +
                                   be*(-3887 - 1776*be - 300*be**2 + (2366 - be*(2554 + 885*be))*u12**2 +
                                       5*(1365 + 2*be*(955 + 213*be))*u12**4 + 735*be**2*u12**6)))) +
                    k2**4*(1646008*(33 + 17*be)*g2**2*k1**2*(-1 + u12**2)**2*(3 - 30*u12**2 + 35*u12**4) -
                           18088*b1*g2*k1*(-1 + u12**2)*(7*k2*u12 *
                           (429 + 416*be - 66*be**2 - 3*(3432 + be*(3484 + 513*be))*u12**2 +
                            5*(3003 + 118*be*(26 + 3*be))*u12**4 + 1575*be**2*u12**6) +
                        k1*(429*(-11 + 114*u12**2 - 369*u12**4 + 350*u12**6) +
                            3*be**2*(1 + 6*u12**2)*(-22 - 513*u12**2 + 590*u12**4 + 525*u12**6) +
                            52*be*(-43 + 408*u12**2 - 2016*u12**4 + 2365*u12**6))) +
                           266*b1**3*(k1*k2*u12*(116688*(4 - 27*u12**2 + 30*u12**4) +
                                                 221*be*(2647 - 17130*u12**2 + 4515*u12**4 + 25200*u12**6) +
                                                 17*be**2*(6425 - 97016*u12**2 - 159639*u12**4 + 542550*u12**6) +
                                                 357*be**3*(-33 - 2324*u12**2 - 1893*u12**4 + 11110*u12**6 + 2100*u12**8) +
                                                 5*be**4*(-1559 - 32010*u12**2 - 12531*u12**4 + 144716*u12**6 + 54264*u12**8)) +
                        k1**2*(29172*(-3 + 10*u12**2)*(1 - 9*u12**2 + 10*u12**4) +
                               5*be**4*(1 + 6*u12**2)*(-107 - 3390*u12**2 - 123*u12**4 + 12188*u12**6 + 2352*u12**8) +
                               221*be*(79 + 1448*u12**2 - 6009*u12**4 - 8902*u12**6 + 21000*u12**8) +
                               17*be**2*(521 + 15502*u12**2 - 68295*u12**4 - 132268*u12**6 + 330700*u12**8) +
                               51*be**3*(57 + 1298*u12**2 - 15347*u12**4 - 1008*u12**6 + 40480*u12**8 + 5880*u12**10)) +
                        14*k2**2*u12**2*(14586*(-3 + 5*u12**2) +
                                         be*(-3*be*(21913 + 6205*be + 675*be**2) - 38*be*(187 + 15*be*(68 + 15*be))*u12**2 +
                                             25*(4641 + be*(10013 + 15*be*(391 + 59*be)))*u12**4 + 210*be**2*(119 + 75*be)*u12**6 +
                                             221*(-415 + 434*u12**2)))) +
                           49*b1**4*be*(4*k1**2*(-17*(8398 - 513*be**2 + 91*be**4) -
                                                 7*(-188955 + be*(-35853 + be*(-969 + 5*be*(3629 + 1730*be))))*u12**2 -
                                                 21*(159562 + be*(84626 + be*(78489 + 5*be*(6232 + 641*be))))*u12**4 +
                                                 5*(491283 + be*(123063 + be*(245157 + 7*be*(27759 + 7498*be))))*u12**6 +
                                                 70*be*(29070 + be*(29070 + 7*be*(1729 + 232*be)))*u12**8) +
                        k2**2*(4199*(-19 - 294*u12**2 + 585*u12**4) +
                               1938*be**2*(-61 - 1593*u12**2 + 2089*u12**4 + 2925*u12**6) +
                               646*be*(-257 - 5260*u12**2 + 9327*u12**4 + 3150*u12**6) +
                               190*be**3*(-179 - 5856*u12**2 + 3093*u12**4 + 22430*u12**6 + 2352*u12**8) +
                               3*be**4*(-1195 - 48180*u12**2 - 21435*u12**4 + 287194*u12**6 + 112560*u12**8)) +
                        2*k1*k2*u12*(8398*(97 - 546*u12**2 + 585*u12**4) +
                                     969*be**2*(-157 - 3956*u12**2 + 2883*u12**4 + 7950*u12**6) +
                                     285*be**3*(-787 - 5696*u12**2 + 6277*u12**4 + 13198*u12**6 + 1568*u12**8) +
                                     21*be**4*(-2215 - 15330*u12**2 + 19317*u12**4 + 40180*u12**6 + 5040*u12**8) +
                                     323*be*(2363 + 7*u12**2*(-3086 + 2937*u12**2 + 1800*u12**4)))) -
                           646*b1**2*(-49*k2**2*u12**2*(-429 - 715*be - 257*be**2 - 27*be**3 -
                                                        2*(3861 + be*(5811 + 2630*be + 348*be**2))*u12**2 +
                                                        (15015 + be*(22945 + 9327*be + 813*be**2))*u12**4 + 30*be**2*(105 + 53*be)*u12**6) +
                        14*k1*k2*u12*(429*(5 + 84*g2 - 4*(19 + 56*g2)*u12**2 + (309 + 140*g2)*u12**4 - 350*u12**6) +
                                      7*be**2*(-1 + 3552*g2 + 2*(65 + 778*g2)*u12**2 + (5067 - 24208*g2)*u12**4 +
                                      4*(-2139 + 4775*g2)*u12**6 - 3600*u12**8) +
                                      13*be*(183 + 14*g2*(-1 + u12)*(1 + u12)*(-299 + 182*u12**2 + 525*u12**4) -
                                             5*u12**2*(424 - 2307*u12**2 + 3062*u12**4)) +
                                      3*be**3*(9 + 286*u12**2 + 1121*u12**4 - 2156*u12**6 - 3180*u12**8 +
                                               70*g2*(20 + 39*u12**2 - 201*u12**4 + 93*u12**6 + 49*u12**8))) +
                        k1**2*(429*(-39 + 454*u12**2 - 2079*u12**4 + 4380*u12**6 - 3500*u12**8 +
                                    392*g2*(-1 + u12)*(1 + u12)*(1 - 9*u12**2 + 10*u12**4)) +
                               3*be**3*(490*g2*(-1 + u12)*(1 + u12)*(-5 - 168*u12**2 + 75*u12**4 + 322*u12**6) -
                                        (1 + 6*u12**2)**2*(-9 - 232*u12**2 + 271*u12**4 + 530*u12**6)) +
                               13*be*(-505 + 6194*u12**2 - 39969*u12**4 + 123996*u12**6 - 129700*u12**8 +
                                      98*g2*(-1 + u12)*(1 + u12)*(19 - 438*u12**2 - 865*u12**4 + 2100*u12**6)) +
                               be**2*(196*g2*(66 + 2943*u12**2 - 979*u12**4 - 12355*u12**6 + 10325*u12**8) -
                                      (1 + 6*u12**2)*(271 + 4982*u12**2 - 48705*u12**4 + 60672*u12**6 + 31500*u12**8)))))))/(1.26742616e8*b1**4*k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2)

        if l1 == 4 and l2 == 4:
            return (9*(15827*b2**2*(5005 + 3*be*(1690 + 643*be))*k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2 *
                    (3 - 30*u12**2 + 35*u12**4) - 266*b2*k1*k2**2*(k1**2 + k2**2 + 2*k1*k2*u12) *
                    (238*(5005 + 3*be*(1690 + 643*be))*g2*k1*(3 - 33*u12**2 + 65*u12**4 - 35*u12**6) +
                     7*b1**2*be*(k2*u12*(62985 + 139077*be + 81787*be**2 + 13695*be**3 -
                                         2*(535925 + 3*be*(405195 + be*(246347 + 40815*be)))*u12**2 +
                                         25*(54145 + 9*be*(13685 + 9*be*(731 + 31*be)))*u12**4 + 4900*be**2*(119 + 75*be)*u12**6) +
                                 k1*(11*be*(-2703 + be*(1207 + 615*be)) - 36*be*(-13600 + 3*be*(629 + 770*be))*u12**2 -
                                     5*(730405 + 3*be*(210239 + be*(109361 + 21465*be)))*u12**4 +
                                     350*(7735 + be*(9945 + be*(6749 + 1707*be)))*u12**6 + 3315*(-39 + 428*u12**2))) +
                     17*b1*(7*k2*u12*(15015 + 22815*be + 9285*be**2 + 781*be**3 -
                                      6*(25025 + 3*be*(12675 + be*(5203 + 467*be)))*u12**2 +
                                      5*(35035 + 3*be*(17745 + (3811 - 1093*be)*be))*u12**4 + 700*be**2*(105 + 53*be)*u12**6) +
                            k1*(5005*(-3 + 10*u12**2)*(3 - 30*u12**2 + 35*u12**4) +
                            2535*be*(-5 + 26*u12**2)*(3 - 30*u12**2 + 35*u12**4) +
                            be**3*(1 + 6*u12**2)*(781 - 8406*u12**2 - 16395*u12**4 + 37100*u12**6) +
                            3*be**2*(-4621 + 72228*u12**2 - 335433*u12**4 + 228850*u12**6 + 147000*u12**8)))) +
                    k2**4*(63308*(5005 + 3*be*(1690 + 643*be))*g2**2*k1**2*(-1 + u12**2)**2*(3 - 30*u12**2 + 35*u12**4) +
                           49*b1**4*be**2*(k1**2*(19*(98379 - 10478*be**2 + 1155*be**4) +
                                                  14*(-1425399 + be*(23902 + be*(235486 + 75*(578 - 169*be)*be)))*u12**2 -
                                                  21*(-2870501 + be*(-408272 + be*(683962 + 15*be*(40368 + 10757*be))))*u12**4 +
                                                  20*(-4234530 + be*(-3285879 + be*(-1708100 + 63*be*(-2813 + 1724*be))))*u12**6 +
                                                  280*(169575 + be*(263245 + be*(243295 + 21*be*(5033 + 788*be))))*u12**8) +
                                           k2**2*(564927 + 1009052*be + 655234*be**2 + 180780*be**3 + 19575*be**4 -
                                                  4*(1444779 + be*(2715138 + be*(1660942 + 15*be*(23006 + 1005*be))))*u12**2 -
                                                  3*(557175 + be*(7060780 + be*(11124082 + 15*be*(378692 + 60785*be))))*u12**4 +
                                                  10*(1187025 + be*(4793320 + be*(5162870 + 3*be*(547432 + 29619*be))))*u12**6 +
                                                  2800*be**2*(3724 + 3*be*(1876 + 543*be))*u12**8 + 588000*be**4*u12**10) +
                                           2*k1*k2*u12*(be*(380494 + be*(655234 + 15*be*(26386 + 5775*be))) -
                                                        2*be*(-2109513 + be*(3321884 + 15*be*(203057 + 40425*be)))*u12**2 -
                                                        3*(7614725 + be*(18020170 + be*(11124082 + 15*be*(250534 + 55699*be))))*u12**4 +
                                                        10*(2374050 + be*(6636035 + be*(5162870 + 3*be*(726553 + 157290*be))))*u12**6 +
                                                        19600*be**2*(532 + 3*be*(155 + 37*be))*u12**8 + 969*(257 + 3962*u12**2))) -
                           9044*b1*g2*k1*(-1 + u12**2)*(7*k2*u12 *
                                                        (15015 + 22815*be + 9285*be**2 + 781*be**3 -
                                                         6*(25025 + 3*be*(12675 + be*(5203 + 467*be)))*u12**2 +
                                                         5*(35035 + 3*be*(17745 + (3811 - 1093*be)*be))*u12**4 + 700*be**2*(105 + 53*be)*u12**6) +
                                                        k1*(5005*(-3 + 10*u12**2)*(3 - 30*u12**2 + 35*u12**4) +
                                                            2535*be*(-5 + 26*u12**2)*(3 - 30*u12**2 + 35*u12**4) +
                                                            be**3*(1 + 6*u12**2)*(781 - 8406*u12**2 - 16395*u12**4 + 37100*u12**6) +
                                                            3*be**2*(-4621 + 72228*u12**2 - 335433*u12**4 + 228850*u12**6 + 147000*u12**8))) +
                           14*b1**3*be*(k1**2*(20995*(-3 + 10*u12**2)*(-117 + 1284*u12**2 - 3305*u12**4 + 2450*u12**6) +
                                               3876*be*(-45 - 6274*u12**2 + 88467*u12**4 - 277140*u12**6 + 231000*u12**8) +
                                               15*be**4*(1 + 6*u12**2)*(3013 - 23006*u12**2 - 284019*u12**4 + 273716*u12**6 +
                                                                        262640*u12**8) + 646*be**2 *
                                               (-1562 + 14365*u12**2 + 126918*u12**4 - 905491*u12**6 + 834650*u12**8 + 205800*u12**10) +
                                               76*be**3*(-3764 + 82529*u12**2 - 186066*u12**4 - 2278339*u12**6 + 2470900*u12**8 +
                                                         1308300*u12**10)) + 7*k2**2*u12**2 *
                                        (20995*(57 - 970*u12**2 + 1225*u12**4) +
                                         1140*be**3*(913 - 16326*u12**2 + 4185*u12**4 + 24500*u12**6) +
                                         646*be**2*(4811 - 86946*u12**2 + 87075*u12**4 + 34300*u12**6) +
                                         45*be**4*(3415 - 49390*u12**2 - 41497*u12**4 + 280*u12**6*(491 + 98*u12**2)) +
                                         3876*be*(909 + 35*u12**2*(-454 + 575*u12**2))) +
                                        2*k1*k2*u12*(62985*(-165 + 2078*u12**2 - 6085*u12**4 + 4900*u12**6) +
                                                     323*be**2*(-1 + 15*u12**2)*(4811 - 86946*u12**2 + 87075*u12**4 + 34300*u12**6) +
                                                     266*be**3*(3001 - 11707*u12**2 - 517359*u12**4 + 338675*u12**6 + 585550*u12**8) +
                                                     15*be**4*(15668 - 123871*u12**2 - 1500822*u12**4 + 790753*u12**6 +
                                                               280*u12**8*(7849 + 882*u12**2)) +
                                                     3876*be*(-3107 + 5*u12**2*(9370 - 38647*u12**2 + 37100*u12**4)))) +
                           19*b1**2*(49*k2**2*u12**2*(85085*(3 - 30*u12**2 + 35*u12**4) +
                                                      172380*be*(3 - 30*u12**2 + 35*u12**4) +
                                                      102*be**2*(3095 - 31218*u12**2 + 19055*u12**4 + 24500*u12**6) +
                                                      68*be**3*(781 - 8406*u12**2 - 16395*u12**4 + 37100*u12**6) +
                                                      be**4*(5239 - 45838*u12**2 - 278121*u12**4 + 380600*u12**6 + 137200*u12**8)) +
                                     k1**2*(85085*(3 - 10*u12**2)**2*(3 - 30*u12**2 + 35*u12**4) -
                                            4420*be*(-39*(-1 + 8*u12**2)*(-3 + 10*u12**2)*(3 - 30*u12**2 + 35*u12**4) +
                                                     49*g2*(-1 + u12)*(1 + u12)*(-117 + 1284*u12**2 - 3305*u12**4 + 2450*u12**6)) -
                                            102*be**2*(-6147 + 116290*u12**2 - 882391*u12**4 -
                                                       60*u12**6*(-43557 + 18789*u12**2 + 24500*u12**4) +
                                                       98*g2*(-1 + u12)*(1 + u12)*(-583 + 9600*u12**2 - 61835*u12**4 + 68250*u12**6)) -
                                            68*be**3*(-((1 + 6*u12**2)*(-1 + 8*u12**2) *
                                                        (781 - 8406*u12**2 - 16395*u12**4 + 37100*u12**6)) +
                                                      49*g2*(-1 + u12)*(1 + u12)*(781 - 3996*u12**2 - 96495*u12**4 + 138950*u12**6)) +
                                            be**4*(-2940*g2*(-1 + u12)*(1 + u12)*(451 - 5544*u12**2 - 21465*u12**4 + 39830*u12**6) +
                                                   (1 + 6*u12**2)**2*(5239 - 45838*u12**2 - 278121*u12**4 + 380600*u12**6 + 137200*u12**8)))
                                     + 14*k1*k2*u12*(85085*(-3 + 10*u12**2)*(3 - 30*u12**2 + 35*u12**4) -
                                                     238*be**3*(-4811*g2 + (-1562 + 91757*g2)*u12**2 + 3*(5604 - 58007*g2)*u12**4 +
                                                                5*(6558 + 10555*g2)*u12**6 + 700*(-106 + 49*g2)*u12**8) -
                                                     2210*be*(-78*(-2 + 9*u12**2)*(3 - 30*u12**2 + 35*u12**4) +
                                                              7*g2*(-1 + u12)*(1 + u12)*(57 - 970*u12**2 + 1225*u12**4)) +
                                                     be**4*(-210*g2*(-1 + u12)*(1 + u12)*(913 - 16326*u12**2 + 4185*u12**4 + 24500*u12**6) +
                                                            (1 + 6*u12**2)*(5239 - 45838*u12**2 - 278121*u12**4 + 380600*u12**6 + 137200*u12**8)) -
                                                     102*be**2*(-((-1 + 8*u12**2)*(3095 - 31218*u12**2 + 19055*u12**4 + 24500*u12**6)) +
                                                                21*g2*(-1 + u12)*(1 + u12)*(909 + 35*u12**2*(-454 + 575*u12**2))))))))/(2.53485232e9*b1**4*k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2)

    # Second Z1^2 Z2^2 term in Eq. 25

    def e44o44_2(self, u12, k1, k2):

        l1, l2 = self.l1, self.l2
        b1, b2, be, g2 = self.b1, self.b2, self.be, self.g2

        if (l1 == 0 and l2 == 0):
            return ((49*b1**4*be**2*k1**2*k2**2*(6*(1001 + be*(858 + be*(286 + 5*be*(26 + 5*be))))*k1*k2 +
                                                 (-3003 + be*(-2574 + be*(3146 + 105*be*(26 + 5*be))))*(k1**2 + k2**2)*u12 +
                                                 12*(-1001 + be*(429 + be*(2002 + 5*be*(221 + 45*be))))*k1*k2*u12**2 +
                                                 2*(6006 + be*(14157 + be*(11154 + 35*be*(143 + 30*be))))*(k1**2 + k2**2)*u12**3 +
                                                 8*(3003 + 2*be*(2574 + be*(1859 + 5*be*(208 + 45*be))))*k1*k2*u12**4 +
                                                 8*be**2*(572 + 35*be*(13 + 3*be))*(k1**2 + k2**2)*u12**5 +
                                                 32*be**2*(143 + 5*be*(13 + 3*be))*k1*k2*u12**6) +
                     182*b1**3*be*k1**2*k2**2*((3465 + be*(1848 + be*(-396 + be*(-44 + 15*be))))*k1*k2 +
                                               (-5775 + be*(-6006 + be*(-1089 + 308*be + 90*be**2)))*(k1**2 + k2**2)*u12 +
                                               3*(-3465 + be*(1232 + be*(4620 + be*(1716 + 265*be))))*k1*k2*u12**2 +
                                               (13860 + be*(25410 + be*(15939 + be*(5544 + 955*be))))*(k1**2 + k2**2)*u12**3 +
                                               4*(5775 + be*(8316 + be*(5445 + 3234*be + 650*be**2)))*k1*k2*u12**4 +
                                               4*be**2*(1485 + 4*be*(308 + 65*be))*(k1**2 + k2**2)*u12**5 +
                                               8*be**2*(792 + 5*be*(88 + 25*be))*k1*k2*u12**6 + 120*be**4*(k1**2 + k2**2)*u12**7) +
                     147147*k1*k2*(b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k1**2*(-1 + u12**2)) *
                     (b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k2**2*(-1 + u12**2)) *
                     (15 + be*(10 + be + 2*be*u12**2)) -
                     3003*b1*(2*g2*k1**2*k2**2*(-1 + u12**2) *
                              (2*(-315 + be*(-175 + be*(7 + 3*be)))*k1*k2 +
                               7*(105 + be*(105 + be*(35 + 3*be)))*(k1**2 + k2**2)*u12 +
                               20*(105 + be*(91 + 3*be*(7 + be)))*k1*k2*u12**2 +
                               28*be**2*(7 + 3*be)*(k1**2 + k2**2)*u12**3 + 16*be**2*(28 + 9*be)*k1*k2*u12**4) +
                              b2*(k1**2 + k2**2 + 2*k1*k2*u12) *
                              ((-315 + be*(-175 + be*(7 + 3*be)))*k1*k2*(k1**2 + k2**2) +
                               7*(105 + be*(105 + be*(35 + 3*be)))*(k1**4 + k2**4)*u12 +
                               10*(105 + be*(91 + 3*be*(7 + be)))*k1*k2*(k1**2 + k2**2)*u12**2 +
                               28*be**2*(7 + 3*be)*(k1**4 + k2**4)*u12**3 +
                               8*be**2*(28 + 9*be)*k1*k2*(k1**2 + k2**2)*u12**4)) -
                     143*b1**2*(49*b2*be*(k1**2 + k2**2 + 2*k1*k2*u12) *
                                (3*(-35 + be*(-21 + be*(3 + be)))*k1*k2*(k1**2 + k2**2) +
                                 3*(1 + be)*(35 + be*(28 + 5*be))*(k1**4 + k2**4)*u12 +
                                 6*(35 + be*(42 + be*(15 + 4*be)))*k1*k2*(k1**2 + k2**2)*u12**2 +
                                 4*be**2*(9 + 5*be)*(k1**4 + k2**4)*u12**3 +
                                 4*be**2*(9 + 2*be)*k1*k2*(k1**2 + k2**2)*u12**4) +
                                k1**2*k2**2*(-3*(945 + be*(420 - 98*be - 12*be**2 + be**3 +
                                                           196*(-35 + be*(-21 + be*(3 + be)))*g2))*k1*k2 -
                                             21*(-315 + be*(-280 - 70*be + be**3 + 14*(1 + be)*(35 + be*(28 + 5*be))*g2)) *
                                             (k1**2 + k2**2)*u12 - 3*(-1155 +
                                                                      be*(420*(5 + 49*g2) + be *
                                                                          (2702 + 564*be + 69*be**2 + 196*(105 + be*(27 + 7*be))*g2)))*k1*k2*u12**2 -
                                             98*(225 + 3*be*(90 + be*(36 + be*(6 + be))) +
                                                 be*(-105 + be*(-189 + be*(-63 + 5*be)))*g2)*(k1**2 + k2**2)*u12**3 +
                                             4*(-7875 + be*(-8400 - be*(4620 + be*(2268 + 395*be)) +
                                                            98*(105 + be*(126 + be*(27 + 8*be)))*g2))*k1*k2*u12**4 +
                                             56*be**2*(-168 + be*(-126 - 19*be + 7*(9 + 5*be)*g2))*(k1**2 + k2**2)*u12**5 +
                                             8*be**2*(-1344 + be*(-864 - 169*be + 98*(9 + 2*be)*g2))*k1*k2*u12**6 -
                                             336*be**4*(k1**2 + k2**2)*u12**7 - 288*be**4*k1*k2*u12**8))) /
                    (8.82882e6*b1**4*k1*k2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))

        if (l1 == 0 and l2 == 2):
            return ((be*(21021*k1*k2*(7 + be + (21 + 11*be)*u12**2) *
                         (b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k1**2*(-1 + u12**2)) *
                         (b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k2**2*(-1 + u12**2)) -
                         3003*b1*(b2*(k1**2 + k2**2 + 2*k1*k2*u12) *
                         (7*k2**4*u12*(21 + 14*be + be**2 + (21 + be*(22 + 9*be))*u12**2) +
                          k1*k2**3*(-7 + 10*be + be**2 + (91 + 3*be*(22 + 5*be))*u12**2 +
                                    2*(105 + be*(88 + 27*be))*u12**4) +
                          14*k1**4*(-2*be*u12 + (21 + be*(20 + 3*be))*u12**3 + 2*be**2*u12**5) +
                          2*k1**3*k2*(-2*(7 + 2*be) + (-7 + 3*(-4 + be)*be)*u12**2 +
                                      2*(3 + 2*be)*(28 + 5*be)*u12**4 + 12*be**2*u12**6)) +
                         2*g2*k1**2*k2**2*(-1 + u12**2) *
                         (7*k2**2*u12*(21 + 14*be + be**2 + (21 + be*(22 + 9*be))*u12**2) +
                          14*k1**2*(-2*be*u12 + (21 + be*(20 + 3*be))*u12**3 + 2*be**2*u12**5) +
                          k1*k2*(-35 + 2*be + be**2 + 7*(11 + 3*be*(2 + be))*u12**2 +
                                 2*(273 + be*(230 + 47*be))*u12**4 + 24*be**2*u12**6))) +
                         7*b1**3*k1**2*k2**2*(k2**2*u12 *
                                              (3003*(1 + 27*u12**2) + 429*be*(-43 + 445*u12**2 + 270*u12**4) +
                                               429*be**2*(-35 + 423*u12**2 + 452*u12**4) +
                                               20*be**4*(36 + 655*u12**2 + 1214*u12**4 + 300*u12**6) +
                                               13*be**3*(127 + 5331*u12**2 + 9502*u12**4 + 720*u12**6)) +
                                              k1**2*u12*(12012*(-5 + 12*u12**2) + 429*be*(-133 + 373*u12**2 + 432*u12**4) +
                                                         429*be**2*(-9 + 161*u12**2 + 688*u12**4) +
                                                         5*be**4*(81 + 1927*u12**2 + 5108*u12**4 + 1704*u12**6) +
                                                         13*be**3*(97 + 3531*u12**2 + 10252*u12**4 + 1800*u12**6)) +
                                              k1*k2*(3003*(3 + 3*u12**2 + 50*u12**4) +
                                                     858*be*(1 + 2*u12**2)*(8 + 99*u12**2 + 117*u12**4) +
                                                     1716*be**2*(-1 + 62*u12**2 + 213*u12**4 + 146*u12**6) +
                                                     26*be**3*(-8 + 1461*u12**2 + 8697*u12**4 + 5170*u12**6 + 360*u12**8) +
                                                     5*be**4*(15 + 1371*u12**2 + 8558*u12**4 + 7264*u12**6 + 432*u12**8))) +
                         49*b1**4*be*k1**2*k2**2*(2*k1*k2 *
                                                  (429 + 3*be*(143 + be*(52 + 5*be*(5 + be))) +
                                                   3*(-286 + be*(1001 + be*(1703 + 5*be*(187 + 39*be))))*u12**2 +
                                                      (5577 + be*(10296 + be*(12259 + 20*be*(368 + 81*be))))*u12**4 +
                                                      4*be*(858 + be*(1079 + 2*be*(295 + 69*be)))*u12**6) +
                                                  k1**2*u12*(858*(-5 + 11*u12**2) + 429*be*(-11 + 35*u12**2 + 16*u12**4) +
                                                             13*be**2*(-31 + 747*u12**2 + 964*u12**4) +
                                                             21*be**4*(5 + 55*u12**2 + 64*u12**4 + 8*u12**6) +
                                                             5*be**3*(87 + 1069*u12**2 + 1220*u12**4 + 144*u12**6)) +
                                                  k2**2*u12*(429*(-1 + 13*u12**2) +
                                                             be*(7*be*(221 + 15*be*(11 + 2*be)) + be*(14001 + 35*be*(199 + 42*be))*u12**2 +
                                                                 4*(858 + be*(1573 + 7*be*(160 + 39*be)))*u12**4 + 429*(1 + 31*u12**2)))) -
                         13*b1**2*(49*b2*(k1**2 + k2**2 + 2*k1*k2*u12) *
                                   (k1**3*k2*(3*(77 + be*(66 + be*(11 + 2*be))) +
                                              3*(77 + be*(132 + be*(165 + 46*be)))*u12**2 +
                                              2*be*(297 + be*(231 + 68*be))*u12**4) +
                                    2*k1*k2**3*(3*(-77 - 66*be + be**3) + 3*(154 + be*(165 + be*(66 + 23*be)))*u12**2 +
                                                be*(297 + be*(297 + 68*be))*u12**4) +
                                    2*k1**4*u12*(231 + 297*be*(1 + u12**2) + 99*be**2*(1 + 4*u12**2) +
                                                 5*be**3*(3 + u12**2)*(1 + 6*u12**2)) +
                                    k2**4*u12*(462 + 297*be*(3 + u12**2) + 66*be**2*(8 + 7*u12**2) +
                                               5*be**3*(15 + 41*u12**2))) +
                                   2*k1**2*k2**2*(7*k1**2*u12*(231*(-1 + 3*u12**2 - 30*u12**4 + 14*g2*(-1 + u12**2)) -
                                                               33*be**2*(1 + 9*u12**2 + 98*u12**4 + 32*u12**6 + 42*g2*(1 + 3*u12**2 - 4*u12**4)) +
                                                               33*be*(-13 + 27*u12**2 - 266*u12**4 + 126*g2*(-1 + u12**4)) +
                                                               be**3*(1 + 6*u12**2)*(-3 - 69*u12**2 - 68*u12**4 + 70*g2*(-3 + 2*u12**2 + u12**4)))
                                                  - 7*k2**2*u12*(231*(-5 + 9*u12**2 + 24*u12**4 - 14*g2*(-1 + u12**2)) +
                                                                 be**3*(3 + 87*u12**2 + 482*u12**4 + 408*u12**6 +
                                                                        35*g2*(15 + 26*u12**2 - 41*u12**4)) -
                                                                 33*be*(23 - 5*u12**2*(9 + 46*u12**2) + 63*g2*(-3 + 2*u12**2 + u12**4)) -
                                                                 33*be**2*(1 - 5*u12**2 - 8*u12**4*(14 + 3*u12**2) + 14*g2*(-8 + u12**2 + 7*u12**4)))
                                                  + k1*k2*(231*(-3 + 49*g2 - 6*(4 + 49*g2)*u12**2 + 5*(-25 + 49*g2)*u12**4 -
                                                                240*u12**6) + be**3*(3 + 69*u12**2 + 68*u12**4) *
                                                           (-1 - 61*u12**2 - 36*u12**4 + 196*g2*(-1 + u12**2)) +
                                                           33*be**2*(49*g2*(-1 + u12)*(1 + u12)*(1 + 27*u12**2 + 32*u12**4) -
                                                                     (1 + 15*u12**2 + 4*u12**4)*(-1 + 51*u12**2 + 48*u12**4)) +
                                                           33*be*(7 - 184*u12**2 - 1403*u12**4 - 1948*u12**6 +
                                                                  294*g2*(1 - 8*u12**2 + u12**4 + 6*u12**6))))))) /
                    (1.765764e6*b1**4*k1*k2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))

        if (l1 == 2 and l2 == 2):
            return ((5*(49*b1**4*be**2*k1**2*k2**2*(-6*(2431 + be*(2210 + be*(374 + 5*be*(34 + 3*be))))*k1*k2 +
                                                    (7293 + be*(5304 + be*(-7174 + 15*be*(-136 + 7*be))))*(k1**2 + k2**2)*u12 +
                                                    6*(26741 + be*(28288 + be*(7514 + 5*be*(952 + 261*be))))*k1*k2*u12**2 +
                                                    (-51051 + be*(-55692 + be*(77418 + 5*be*(15028 + 3381*be))))*(k1**2 + k2**2)*u12**3 +
                                                    4*(-58344 + be*(5967 + be*(130016 + 5*be*(16099 + 3546*be))))*k1*k2*u12**4 +
                                                    4*(43758 + be*(125307 + be*(112234 + be*(53329 + 11676*be))))*(k1**2 + k2**2)*u12**5 +
                                                    16*(21879 + be*(45084 + be*(34306 + be*(19924 + 4455*be))))*k1*k2*u12**6 +
                                                    24*be**2*(3060 + be*(2703 + 637*be))*(k1**2 + k2**2)*u12**7 +
                                                    288*be**2*(255 + 7*be*(17 + 4*be))*k1*k2*u12**8) +
                        238*b1**3*be*k1**2*k2**2*(-((14157 + be*(11154 + be*(-780 + be*(46 + 15*be))))*k1*k2) -
                                                  (-19734 + be*(-20163 + be*(-1599 + be*(623 + 45*be))))*(k1**2 + k2**2)*u12 +
                                                  12*(7293 + be*(4147 + be*(-2626 + be*(-419 + 35*be))))*k1*k2*u12**2 +
                                                  2*(-46332 + be*(-68640 + be*(-20397 + be*(1848 + 1135*be))))*(k1**2 + k2**2)*u12**3 +
                                                  (-172887 + be*(-43758 + be*(198432 + be*(91014 + 16855*be))))*k1*k2*u12**4 +
                                                  (138996 + be*(333333 + be*(247455 + be*(92827 + 17281*be))))*(k1**2 + k2**2)*u12**5 +
                                                  20*(11583 + be*(21879 + be*(15717 + be*(9631 + 2080*be))))*k1*k2*u12**6 +
                                                  12*be**2*(5850 + be*(5565 + 1262*be))*(k1**2 + k2**2)*u12**7 +
                                                  72*be**2*(1040 + be*(650 + 187*be))*k1*k2*u12**8 + 1512*be**4*(k1**2 + k2**2)*u12**9) +
                        357357*k1*k2*(b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k1**2*(-1 + u12**2)) *
                        (b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k2**2*(-1 + u12**2)) *
                        (-21 + 63*u12**2 + be*(-22 - be + (66 + 7*be)*u12**2 + 12*be*u12**4)) -
                        4641*b1*(2*g2*k1**2*k2**2*(-1 + u12**2) *
                                 (-2*(-693 + be*(-605 + be*(77 + 5*be)))*k1*k2 -
                                  7*(231 + be*(363 + be*(121 + 5*be)))*(k1**2 + k2**2)*u12 +
                                  2*(-4389 + be*(-4961 - 627*be + 9*be**2))*k1*k2*u12**2 +
                                  7*(693 + be*(1089 + be*(451 + 39*be)))*(k1**2 + k2**2)*u12**3 +
                                  4*(3465 + be*(4719 + 5*be*(275 + 37*be)))*k1*k2*u12**4 +
                                  56*be**2*(33 + 17*be)*(k1**2 + k2**2)*u12**5 + 96*be**2*(44 + 17*be)*k1*k2*u12**6) +
                                 b2*(k1**2 + k2**2 + 2*k1*k2*u12) *
                                 (-((-693 + be*(-605 + be*(77 + 5*be)))*k1*k2*(k1**2 + k2**2)) -
                                  7*(231 + be*(363 + be*(121 + 5*be)))*(k1**4 + k2**4)*u12 +
                                  (-4389 + be*(-4961 - 627*be + 9*be**2))*k1*k2*(k1**2 + k2**2)*u12**2 +
                                  7*(693 + be*(1089 + be*(451 + 39*be)))*(k1**4 + k2**4)*u12**3 +
                                  2*(3465 + be*(4719 + 5*be*(275 + 37*be)))*k1*k2*(k1**2 + k2**2)*u12**4 +
                                  56*be**2*(33 + 17*be)*(k1**4 + k2**4)*u12**5 +
                                  48*be**2*(44 + 17*be)*k1*k2*(k1**2 + k2**2)*u12**6)) -
                        17*b1**2*(49*b2*be*(k1**2 + k2**2 + 2*k1*k2*u12) *
                                  (-3*(-1573 + be*(-1287 + be*(65 + 11*be)))*k1*k2*(k1**2 + k2**2) -
                                   3*(715 + be*(1287 + be*(533 + 25*be)))*(k1**4 + k2**4)*u12 +
                                   3*(-6149 + be*(-5577 + be*(429 + 257*be)))*k1*k2*(k1**2 + k2**2)*u12**2 +
                                   (11583 + be*(27027 + be*(16809 + 2885*be)))*(k1**4 + k2**4)*u12**3 +
                                   2*(11583 + be*(18018 + be*(7059 + 1996*be)))*k1*k2*(k1**2 + k2**2)*u12**4 +
                                   120*be**2*(39 + 25*be)*(k1**4 + k2**4)*u12**5 +
                                   360*be**2*(13 + 3*be)*k1*k2*(k1**2 + k2**2)*u12**6) +
                                  k1**2*k2**2*(3*(27027 + be *
                                                  (-6292*(-3 + 49*g2) +
                                                   be*(-286*(25 + 882*g2) + be*(-260 + 11*be + 196*(65 + 11*be)*g2))))*k1*k2 +
                                               21*(-9009 + 11*be*(-1144 - 286*be + be**3) +
                                                   14*be*(715 + be*(1287 + be*(533 + 25*be)))*g2)*(k1**2 + k2**2)*u12 -
                                               6*(57057 + be*(-18876 - be*(71786 + 3*be*(2548 + 69*be)) +
                                                              196*(-3861 + be*(-3432 + be*(247 + 134*be)))*g2))*k1*k2*u12**2 -
                                               7*(-171171 + 3*be*(-94380 + be*(-36894 + be*(-1820 + 191*be))) +
                                                  112*be*(1716 + be*(3861 + be*(2301 + 370*be)))*g2)*(k1**2 + k2**2)*u12**3 -
                                               (-1198197 + be*(12012*(-55 + 679*g2) +
                                                               be*(793650 + 251628*be + 49835*be**2 + 196*(52767 + be*(12831 + 3221*be))*g2))
                                                )*k1*k2*u12**4 - 14*(135135 + 273*be**3*(78 - 311*g2) - 11583*be*(-22 + 7*g2) -
                                                                     429*be**2*(-304 + 441*g2) + be**4*(4309 + 805*g2))*(k1**2 + k2**2)*u12**5 +
                                               4*(-675675 + be*(-1132560 - be*(709566 + be*(343512 + 68087*be)) +
                                                                1274*(891 + be*(1386 + be*(363 + 112*be)))*g2))*k1*k2*u12**6 +
                                               168*be**2*(-6864 + 7*be*(-884 + 390*g2 + be*(-149 + 250*g2)))*(k1**2 + k2**2) *
                                               u12**7 + 72*be**2*(-18304 + be*(-14144 - 2911*be + 980*(13 + 3*be)*g2))*k1*k2 *
                                               u12**8 - 45360*be**4*(k1**2 + k2**2)*u12**9 - 38880*be**4*k1*k2*u12**10)))) /
                    (6.0035976e7*b1**4*k1*k2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))

        if l1 == 0 and l2 == 4:
            return (be**2*(476476*k1*k2*(-1 + 3*u12**2)*(b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k1**2*(-1 + u12**2)) *
                    (b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k2**2*(-1 + u12**2)) +
                119*b1**3*k1**2*k2**2*(k2**2*u12*(-2431 - 3094*be - 1947*be**2 - 540*be**3 +
                                                  2*(7865 - 3*be*(-169 + 591*be + 45*be**2))*u12**2 + (50765 + be*(119470 + 3*be*(26291 + 5200*be)))*u12**4 +
                                                  30*be*(455 + 3*be*(230 + 97*be))*u12**6) +
                                       2*k1**2*u12*(2002 + 3848*be - 486*be**2 - 305*be**3 - (38610 + be*(44408 + 3*be*(4316 + 745*be)))*u12**2 +
                                                    3*(22880 + be*(26260 + be*(10308 + 2075*be)))*u12**4 + 25*be*(1092 + be*(1182 + 323*be))*u12**6) +
                                       k1*k2*(5863 + 1924*be + 471*be**2 - 100*be**3 - 2*(17732 + be*(16510 + 3*be*(4022 + 695*be)))*u12**2 +
                                              (59059 + 3*be*(23920 + be*(17617 + 2200*be)))*u12**4 + 2*(49335 + be*(97058 + 5*be*(13197 + 3835*be)))*u12**6 +
                    60*be*(455 + 2*be*(225 + 53*be))*u12**8)) -
                1547*b1*(b2*(k1**2 + k2**2 + 2*k1*k2*u12) *
                            (56*k2**4*u12*(-2*be + (33 + 17*be)*u12**2) +
                             8*k1*k2**3*(22 - 2*be + 5*(-11 + be)*u12**2 + 6*(44 + 17*be)*u12**4) +
                             7*k1**4*u12*(-55 - 21*be - 6*(11 + 9*be)*u12**2 + 5*(77 + 39*be)*u12**4) +
                             k1**3*k2*(121 - 21*be - 20*(55 + 9*be)*u12**2 + (517 - 129*be)*u12**4 + 30*(77 + 39*be)*u12**6)) +
                         2*g2*k1**2*k2**2*(-1 + u12**2)*(56*k2**2*u12*(-2*be + (33 + 17*be)*u12**2) +
                                                         7*k1**2*u12*(-55 - 21*be - 6*(11 + 9*be)*u12**2 + 5*(77 + 39*be)*u12**4) +
                                                         k1*k2*(297 - 37*be - 140*(11 + be)*u12**2 + (2629 + 687*be)*u12**4 + 30*(77 + 39*be)*u12**6))) +
                49*b1**4*k1**2*k2**2*(2*k1*k2*(9724*(-1 + 2*u12**2 + u12**4) + 221*be*(-37 - 7*u12**2 + 309*u12**4 + 215*u12**6) +
                                               170*be**3*(-10 - 87*u12**2 + 372*u12**4 + 397*u12**6) +
                                               15*be**4*(-25 - 240*u12**2 + 975*u12**4 + 1138*u12**6) +
                                               51*be**2 *
                                               (-74 - 411*u12**2 + 1984 *
                                                u12**4 + 1861*u12**6)
                                               ) + k1**2*u12*(19448*(-2 + 3*u12**2) +
                                                              be*(-3*be*(6171 + 5*be*(816 + 175*be)) - 6*be*(12529 + 15*be*(187 + 35*be))*u12**2 +
                                                                  3*(57460 + be*(76449 + 5*be*(6596 + 1533*be)))*u12**4 + 30*be*(1190 + be*(1479 + 350*be))*u12**6 -
                                                                  884*(47 + 28*u12**2))) + k2**2*u12 *
                                      (9724*(1 + u12**2) + be*(-63*be*(51 + 5*be*(17 + 5*be)) + 6*be*(12121 + 35*be*(187 + 35*be))*u12**2 +
                                                               (47515 + 3*be*(33949 + 35*be*(765 + 209*be)))*u12**4 + 221*(47 + 218*u12**2)))) -
                17*b1**2*(49*b2*(k1**2 + k2**2 + 2*k1*k2*u12) *
                          (4*k2**4*u12*(143 + 78*be - 45*be**2 + (715 + 3*be*(364 + 155*be))*u12**2) +
                              k1**4*u12*(-2288 - 2613*be - 555*be**2 + 2*(2860 + be*(2509 + 255*be))*u12**2 + 25*be*(91 + 69*be)*u12**4) +
                              k1**3*k2*(-429 - 208*be - 111*be**2 + 2*(1573 + (260 - 69*be)*be)*u12**2 +
                                        (715 + 3*be*(1456 + 643*be))*u12**4) +
                              k1*k2**3*(-3*be*(91 + 37*be) - 6*be*(325 + 23*be)*u12**2 + (5720 + 3*be*(2301 + 643*be))*u12**4 -
                                        1144*(1 + u12**2))) + k1**2*k2**2 *
                          (7*k2**2*u12*(143*(5 - 56*g2 + 4*(27 - 56*g2)*u12**2 + (-239 + 280*g2)*u12**4 - 210*u12**6) +
                                        26*be*(5 + 444*u12**2 - 959*u12**4 - 1170*u12**6 + 168*g2*(-1 + u12)*(1 + u12)*(1 + 14*u12**2)) +
                                        3*be**2*(37 + 268*u12**2 - 367*u12**4 - 3858*u12**6 + 280*g2*(3 - 34*u12**2 + 31*u12**4))) +
                           7*k1**2*u12*(143*(-15 + 224*g2 + 8*(1 - 98*g2)*u12**2 + 7*(3 + 80*g2)*u12**4 - 350*u12**6) +
                                        26*be*(-5 + 1407*g2 + (74 - 4109*g2)*u12**2 + 7*(-27 + 211*g2)*u12**4 + 5*(-312 + 245*g2)*u12**6) +
                                        3*be**2*(37 + 268*u12**2 - 367*u12**4 - 3858*u12**6 + 70*g2*(37 - 71*u12**2 - 81*u12**4 + 115*u12**6))) +
                           k1*k2*(3*be**2*(-37 - 46*u12**2 + 643*u12**4)*(-1 - 61*u12**2 - 36*u12**4 + 196*g2*(-1 + u12**2)) +
                                  143*(49 - 61*u12**2 + 115*u12**4 - 2707*u12**6 - 2100*u12**8 +
                                       98*g2*(11 - 25*u12**2 - 31*u12**4 + 45*u12**6)) +
                                  26*be*(-((-1 + 51*u12**2 + 48*u12**4)*(-37 + 82*u12**2 + 195*u12**4)) +
                                         49*g2*(37 + 73*u12**2 - 977*u12**4 + 867*u12**6)))))))/(1.667666e7*b1**4*k1*k2*(k1**2 + k2**2 + 2*k1*k2*u12)**2)

        if l1 == 2 and l2 == 4:
            return (be*(205751*k1*k2*(-33 - 19*be - 6*(99 + 49*be)*u12**2 + 15*(77 + 39*be)*u12**4) *
                        (b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k1**2*(-1 + u12**2)) *
                        (b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k2**2*(-1 + u12**2)) +
                        133*b1**3*k1**2*k2**2*(k2**2*u12*(7293*(15 - 138*u12**2 + 235*u12**4) +
                                                          221*be*(1177 - 10312*u12**2 + 8617*u12**4 + 15750*u12**6) +
                                                          17*be**2*(9043 - 133332*u12**2 + 75659*u12**4 + 340950*u12**6) +
                                                          357*be**3*(-53 - 2124*u12**2 + 427*u12**4 + 9870*u12**6 + 840*u12**8) +
                                                          30*be**4*(-219 - 4257*u12**2 + 1807*u12**4 + 21849*u12**6 + 6300*u12**8)) +
                                               k1**2*u12*(116688*(4 - 27*u12**2 + 30*u12**4) + 221*be*(2647 - 17130*u12**2 + 4515*u12**4 + 25200*u12**6) +
                                                          17*be**2*(6425 - 97016*u12**2 - 159639*u12**4 + 542550*u12**6) +
                                                          357*be**3*(-33 - 2324*u12**2 - 1893*u12**4 + 11110*u12**6 + 2100*u12**8) +
                                                          5*be**4*(-1559 - 32010*u12**2 - 12531*u12**4 + 144716*u12**6 + 54264*u12**8)) +
                                               k1*k2*(7293*(-3 - 68*u12**2 - 155*u12**4 + 450*u12**6) +
                                                      442*be*(-32 - 4075*u12**2 - 860*u12**4 + 6549*u12**6 + 13650*u12**8) +
                                                      68*be**2*(257 - 21769*u12**2 - 42681*u12**4 + 98153*u12**6 + 112200*u12**8) +
                                                      102*be**3*(29 - 5078*u12**2 - 22841*u12**4 + 47640*u12**6 + 40030*u12**8 + 2940*u12**10) +
                                                      5*be**4*(-179 - 18270*u12**2 - 79923*u12**4 + 164888*u12**6 + 225132*u12**8 + 14112*u12**10))) +
                        49*b1**4*be*k1**2*k2**2*(2*k1*k2*(4199*(-19 + 83*u12**2 - 437*u12**4 + 645*u12**6) +
                                                          969*be**2*(-36 - 1329*u12**2 - 604*u12**4 + 6079*u12**6 + 2610*u12**8) +
                                                          323*be*(-257 - 2204*u12**2 - 2973*u12**4 + 13054*u12**6 + 6300*u12**8) +
                                                          95*be**3*(-179 - 7476*u12**2 - 3747*u12**4 + 40130*u12**6 + 14952*u12**8) +
                                                          3*be**4*(-1195 - 48180*u12**2 - 21435*u12**4 + 287194*u12**6 + 112560*u12**8)) +
                                                 k2**2*u12*(4199*(145 - 518*u12**2 + 645*u12**4) + 969*be**2*(-87 - 2416*u12**2 + 5473*u12**4 + 3750*u12**6) +
                                                            285*be**3*(-633 - 3218*u12**2 + 9483*u12**4 + 8928*u12**6) +
                                                            42*be**4*(-810 - 4585*u12**2 + 13792*u12**4 + 15099*u12**6) +
                                                            323*be*(1747 + 7*u12**2*(-1490 + 2329*u12**2 + 900*u12**4))) +
                                                 k1**2*u12*(8398*(97 - 546*u12**2 + 585*u12**4) + 969*be**2*(-157 - 3956*u12**2 + 2883*u12**4 + 7950*u12**6) +
                                                            285*be**3*(-787 - 5696*u12**2 + 6277*u12**4 + 13198*u12**6 + 1568*u12**8) +
                                                            21*be**4*(-2215 - 15330*u12**2 + 19317*u12**4 + 40180*u12**6 + 5040*u12**8) +
                                                            323*be*(2363 + 7*u12**2*(-3086 + 2937*u12**2 + 1800*u12**4)))) -
                        2261*b1*(b2*(k1**2 + k2**2 + 2*k1*k2*u12) *
                                 (14*k1**4*u12*(429 + 416*be - 66*be**2 - 3*(3432 + be*(3484 + 513*be))*u12**2 +
                                                5*(3003 + 118*be*(26 + 3*be))*u12**4 + 1575*be**2*u12**6) +
                                  7*k2**4*u12*(429*(-5 - 6*u12**2 + 35*u12**4) + 78*be*(-29 - 30*u12**2 + 195*u12**4) +
                                               be**2*(-125 - 2182*u12**2 + 5787*u12**4)) +
                                  2*k1**3*k2*(429*(3 + 16*u12**2 - 215*u12**4 + 280*u12**6) +
                                              3*be**2*(1 + 6*u12**2)*(-22 - 513*u12**2 + 590*u12**4 + 525*u12**6) +
                                              26*be*(35 - 31*u12**2 - 2701*u12**4 + 4125*u12**6)) +
                                  k1*k2**3*(be**2*(1 + 6*u12**2)*(-125 - 2182*u12**2 + 5787*u12**4) +
                                            429*(-1 + 32*u12**2 - 213*u12**4 + 350*u12**6) + 26*be*(-49 - 62*u12**2 - 1713*u12**4 + 4680*u12**6))) +
                                 2*g2*k1**2*k2**2*(-1 + u12**2)*(14*k1**2*u12 *
                                                                 (429 + 416*be - 66*be**2 - 3*(3432 + be*(3484 + 513*be))*u12**2 + 5*(3003 + 118*be*(26 + 3*be))*u12**4 +
                                                                  1575*be**2*u12**6) + 7*k2**2*u12 *
                                                                 (429*(-5 - 6*u12**2 + 35*u12**4) + 78*be*(-29 - 30*u12**2 + 195*u12**4) +
                                                                     be**2*(-125 - 2182*u12**2 + 5787*u12**4)) +
                                                                 k1*k2*(429*(5 + 64*u12**2 - 643*u12**4 + 910*u12**6) +
                                                                        be**2*(1 + 6*u12**2)*(-257 - 5260*u12**2 + 9327*u12**4 + 3150*u12**6) +
                                                                        26*be*(21 - 124*u12**2 - 7115*u12**4 + 12930*u12**6)))) -
                        323*b1**2*(49*b2*(k1**2 + k2**2 + 2*k1*k2*u12) *
                                   (2*k1*k2**3*(858 + 884*be - 66*be**2 - 27*be**3 - (7722 + be*(8047 + 12*be*(215 + 58*be)))*u12**2 +
                                                (8580 + be*(5642 + 3*be*(372 + 271*be)))*u12**4 + 15*be*(455 + 2*be*(225 + 53*be))*u12**6) +
                                    k1**3*k2*(-1287 - 1326*be - 125*be**2 - 54*be**3 + 2*(1287 + be*(1235 - 4*be*(533 + 174*be)))*u12**2 +
                                              (2145 + be*(-4186 + 3*be*(1493 + 542*be)))*u12**4 + 30*be*(455 + be*(345 + 106*be))*u12**6) +
                                    k2**4*u12*(1716*(-3 + 5*u12**2) + be *
                                               (-8411 - 4182*be - 495*be**2 + 2*(6097 + 3*(712 - 85*be)*be)*u12**2 + 15*(455 + 3*be*(230 + 97*be))*u12**4))
                                    + 2*k1**4*u12*(858*(-3 + 5*u12**2) +
                                                   be*(-3887 - 1776*be - 300*be**2 + (2366 - be*(2554 + 885*be))*u12**2 +
                                                       5*(1365 + 2*be*(955 + 213*be))*u12**4 + 735*be**2*u12**6))) +
                                   2*k1**2*k2**2*(7*k2**2*u12*(13*be*(-293 + 4529*g2 + (1212 - 11095*g2)*u12**2 + (6299 + 2891*g2)*u12**4 +
                                                                      15*(-862 + 245*g2)*u12**6) +
                                                               7*be**2*(1 + 4182*g2 + 6*(64 - 1409*g2)*u12**2 + (5453 - 6078*g2)*u12**4 + 18*(-561 + 575*g2)*u12**6 -
                                                                        2700*u12**8) + 429*(-9 + 22*u12**2 + 155*u12**4 - 280*u12**6 + 28*g2*(3 - 8*u12**2 + 5*u12**4)) +
                                                               3*be**3*(9 + 286*u12**2 + 1121*u12**4 - 2156*u12**6 - 3180*u12**8 +
                                                                        35*g2*(33 + u12**2 - 325*u12**4 + 291*u12**6))) +
                                                  k1*k2*(3*be**3*(-9 - 232*u12**2 + 271*u12**4 + 530*u12**6) *
                                                         (-1 - 61*u12**2 - 36*u12**4 + 196*g2*(-1 + u12**2)) +
                                                         429*(3 + 69*u12**2 + 245*u12**4 + 915*u12**6 - 2800*u12**8 +
                                                              49*g2*(-1 + 31*u12**2 - 75*u12**4 + 45*u12**6)) +
                                                         13*be*(-13 + 1621*u12**2 + 36017*u12**4 - 7013*u12**6 - 110580*u12**8 +
                                                                98*g2*(-1 + u12)*(1 + u12)*(17 - 524*u12**2 + 273*u12**4 + 1050*u12**6)) +
                                                         be**2*(-((-1 + 51*u12**2 + 48*u12**4)*(-257 - 5260*u12**2 + 9327*u12**4 + 3150*u12**6)) +
                                                                49*g2*(-1 + u12)*(1 + u12)*(-257 - 9424*u12**2 + 6711*u12**4 + 23850*u12**6))) +
                                                  7*k1**2*u12*(429*(5 + 84*g2 - 4*(19 + 56*g2)*u12**2 + (309 + 140*g2)*u12**4 - 350*u12**6) +
                                                               7*be**2*(-1 + 3552*g2 + 2*(65 + 778*g2)*u12**2 + (5067 - 24208*g2)*u12**4 + 4*(-2139 + 4775*g2)*u12**6 -
                                                                        3600*u12**8) + 13*be*(183 + 14*g2*(-1 + u12)*(1 + u12)*(-299 + 182*u12**2 + 525*u12**4) -
                                                                                              5*u12**2*(424 - 2307*u12**2 + 3062*u12**4)) +
                                                               3*be**3*(9 + 286*u12**2 + 1121*u12**4 - 2156*u12**6 - 3180*u12**8 +
                                                                        70*g2*(20 + 39*u12**2 - 201*u12**4 + 93*u12**6 + 49*u12**8)))))))/(1.26742616e8*b1**4*k1*k2*(k1**2 + k2**2 + 2*k1*k2*u12)**2)

        if l1 == 4 and l2 == 4:
            return (9*(49*b1**4*be**2*k1**2*k2**2*(2*(564927 + be*(504526 + be*(199082 + 15*be*(6026 + 1305*be))))*k1*k2 +
                                                   (249033 + be*(380494 + be*(655234 + 15*be*(26386 + 5775*be))))*(k1**2 + k2**2)*u12 -
                                                   4*(3205452 + be*(2922827 + 3*be*(170392 + 5*be*(12761 + 2010*be))))*k1*k2*u12**2 -
                                                   2*(-1919589 + be*(-2109513 + be*(3321884 + 15*be*(203057 + 40425*be))))*(k1**2 + k2**2)*u12**3 -
                                                   2*(-17565063 + be*(-4420578 + be*(21616262 + 45*be*(288126 + 60785*be))))*k1*k2*u12**4 -
                                                   3*(7614725 + be*(18020170 + be*(11124082 + 15*be*(250534 + 55699*be))))*(k1**2 + k2**2)*u12**5 +
                                                   4*(-15237525 + be*(-15056645 + be*(3139826 + 15*be*(149225 + 29619*be))))*k1*k2*u12**6 +
                                                   10*(2374050 + be*(6636035 + be*(5162870 + 3*be*(726553 + 157290*be))))*(k1**2 + k2**2)*u12**7 +
                                                   200*(237405 + 2*be*(239666 + 3*be*(56069 + 14*be*(2411 + 543*be))))*k1*k2*u12**8 +
                                                   19600*be**2*(532 + 3*be*(155 + 37*be))*(k1**2 + k2**2)*u12**9 + 78400*be**2*(133 + 3*be*(21 + 5*be))*k1*k2*u12**10)
                       + 14*b1**3*be*k1**2*k2**2*((7369245 + be*(5042676 + be*(-1009052 + 3*be*(-56696 + 15065*be))))*k1*k2 +
                                                  (-10392525 + be*(-12042732 + be*(-1553953 + 798266*be + 235020*be**2)))*(k1**2 + k2**2)*u12 +
                                                  (-97059885 + be*(-56523708 + be*(33365900 + be*(10605496 + 1001805*be))))*k1*k2*u12**2 -
                                                  (-130882830 + be*(-181590600 + be*(-51392853 + be*(3114062 + 1858065*be))))*(k1**2 + k2**2)*u12**3 +
                                                  (335185175 - be*(-57337668 + be*(356411120 + be*(144918928 + 21888675*be))))*k1*k2*u12**4 -
                                                  3*(127754575 + be*(249659620 + be*(149792865 + 45872498*be + 7504110*be**2)))*(k1**2 + k2**2)*u12**5 -
                                                  (668165875 + be*(669559620 + be*(63410068 + 15*be*(7996264 + 2301835*be))))*k1*k2*u12**6 +
                                                  5*(61725300 + be*(143799600 + be*(82159895 + be*(18017510 + 2372259*be))))*(k1**2 + k2**2)*u12**7 +
                                                  20*(25718875 + be*(47141850 + be*(28254425 + 2*be*(8909765 + 1797006*be))))*k1*k2*u12**8 +
                                                  700*be**2*(237405 + be*(222509 + 47094*be))*(k1**2 + k2**2)*u12**9 +
                                                  19600*be**2*(9044 + be*(5605 + 1647*be))*k1*k2*u12**10 + 3704400*be**4*(k1**2 + k2**2)*u12**11) +
                       15827*k1*k2*(b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k1**2*(-1 + u12**2)) *
                       (b2*(k1**2 + k2**2 + 2*k1*k2*u12) + 2*g2*k2**2*(-1 + u12**2)) *
                       (5005*(3 - 30*u12**2 + 35*u12**4) + 5070*be*(3 - 30*u12**2 + 35*u12**4) +
                        3*be**2*(583 - 5964*u12**2 - 1725*u12**4 + 12250*u12**6)) -
                       2261*b1*(2*g2*k1**2*k2**2*(-1 + u12**2)*(2*(-45045 + be*(-38025 + be*(2289 + 781*be)))*k1*k2 +
                                                                7*(15015 + be*(22815 + be*(9285 + 781*be)))*(k1**2 + k2**2)*u12 -
                                                                120*(-10010 + be*(-9633 + be*(-677 + 62*be)))*k1*k2*u12**2 -
                                                                42*(25025 + 3*be*(12675 + be*(5203 + 467*be)))*(k1**2 + k2**2)*u12**3 -
                                                                6*(675675 + be*(806975 + be*(185209 + 22277*be)))*k1*k2*u12**4 -
                                                                35*(-35035 + 3*be*(-17745 + be*(-3811 + 1093*be)))*(k1**2 + k2**2)*u12**5 +
                                                                20*(175175 + be*(230685 + (24879 - 6127*be)*be))*k1*k2*u12**6 +
                                                                4900*be**2*(105 + 53*be)*(k1**2 + k2**2)*u12**7 + 8400*be**2*(140 + 53*be)*k1*k2*u12**8) +
                                b2*(k1**2 + k2**2 + 2*k1*k2*u12)*((-45045 + be*(-38025 + be*(2289 + 781*be)))*k1*k2*(k1**2 + k2**2) +
                                                                  7*(15015 + be*(22815 + be*(9285 + 781*be)))*(k1**4 + k2**4)*u12 -
                                                                  60*(-10010 + be*(-9633 + be*(-677 + 62*be)))*k1*k2*(k1**2 + k2**2)*u12**2 -
                                                                  42*(25025 + 3*be*(12675 + be*(5203 + 467*be)))*(k1**4 + k2**4)*u12**3 -
                                                                  3*(675675 + be*(806975 + be*(185209 + 22277*be)))*k1*k2*(k1**2 + k2**2)*u12**4 -
                                                                  35*(-35035 + 3*be*(-17745 + be*(-3811 + 1093*be)))*(k1**4 + k2**4)*u12**5 -
                                                                  10*(-175175 + be*(-230685 + be*(-24879 + 6127*be)))*k1*k2*(k1**2 + k2**2)*u12**6 +
                                                                  4900*be**2*(105 + 53*be)*(k1**4 + k2**4)*u12**7 + 4200*be**2*(140 + 53*be)*k1*k2*(k1**2 + k2**2)*u12**8)) -
                       19*b1**2*(49*b2*be*(k1**2 + k2**2 + 2*k1*k2*u12) *
                                 ((-129285 + be*(-98379 + be*(13277 + 5239*be)))*k1*k2*(k1**2 + k2**2) +
                                  (62985 + be*(139077 + be*(81787 + 13695*be)))*(k1**4 + k2**4)*u12 -
                                  2*(-709410 + be*(-584613 + be*(49300 + 22919*be)))*k1*k2*(k1**2 + k2**2)*u12**2 -
                                  2*(535925 + 3*be*(405195 + be*(246347 + 40815*be)))*(k1**4 + k2**4)*u12**3 -
                                  (3652025 + 3*be*(1463105 + be*(358649 + 92707*be)))*k1*k2*(k1**2 + k2**2)*u12**4 +
                                  25*(54145 + 9*be*(13685 + 9*be*(731 + 31*be)))*(k1**4 + k2**4)*u12**5 +
                                  50*(54145 + be*(82110 + be*(24905 + 7612*be)))*k1*k2*(k1**2 + k2**2)*u12**6 +
                                  4900*be**2*(119 + 75*be)*(k1**4 + k2**4)*u12**7 + 34300*be**2*(17 + 4*be)*k1*k2*(k1**2 + k2**2)*u12**8) +
                                 k1**2*k2**2*((-2297295 + 517140*be*(-3 + 49*g2) - 53108*be**3*(-1 + 49*g2) - 5239*be**4*(1 + 196*g2) +
                                               102*be**2*(4621 + 189042*g2))*k1*k2 -
                                              7*(-765765 + be*(-1034280 - 315690*be + 5239*be**3 + 14*(62985 + be*(139077 + be*(81787 + 13695*be)))*g2)) *
                                              (k1**2 + k2**2)*u12 + (25780755 - 3*be*(-2585700 + be*(5559306 + be*(1093372 + 91247*be))) +
                                                                     196*be*(-1548105 + be*(-1267605 + be*(111877 + 51077*be)))*g2)*k1*k2*u12**2 +
                                              14*(-5105100 + 14365*be*(-522 + 553*g2) + 119*be**3*(-1562 + 91757*g2) + 51*be**2*(-55978 + 352779*g2) +
                                                  be**4*(7202 + 1810095*g2))*(k1**2 + k2**2)*u12**3 +
                                              (-80405325 + be*(402220*(45 + 2471*g2) +
                                                               be*(108641730 + 25487964*be + 2885635*be**2 + 196*(5558541 + be*(977347 + 232283*be))*g2)))*k1*k2*u12**4
                                              - 7*(-34459425 - 3*be*(19536400 + be*(9139166 + 3*be*(444584 + 61461*be))) +
                                                   14*be*(2425475 + 3*be*(1836765 + 43*be*(22933 + 2385*be)))*g2)*(k1**2 + k2**2)*u12**5 +
                                              (288012725 + be*(323212500 + 110918574*be + 86817844*be**2 + 18234949*be**3 -
                                                               196*(6359275 + be*(8494815 + be*(2321197 + 658721*be)))*g2))*k1*k2*u12**6 -
                                              14*(14889875 + be*(27149850 + 6524940*be - 3902010*be**2 - 644063*be**3 +
                                                                 2975*(-3185 + be*(-7245 + be*(-2111 + 717*be)))*g2))*(k1**2 + k2**2)*u12**7 +
                                              4*(-74449375 - 3*be*(40222000 + be*(16473000 + be*(6262460 + 1111787*be))) +
                                                 2450*be*(54145 + be*(82110 + be*(13243 + 4868*be)))*g2)*k1*k2*u12**8 +
                                              1400*be**2*(-34*(2940 + be*(2597 + 356*be)) + 343*be*(119 + 75*be)*g2)*(k1**2 + k2**2)*u12**9 +
                                              400*be**2*(-399840 + be*(-302736 - 55177*be + 16807*(17 + 4*be)*g2))*k1*k2*u12**10 -
                                              5762400*be**4*(k1**2 + k2**2)*u12**11 - 4939200*be**4*k1*k2*u12**12))))/(2.53485232e9*b1**4*k1*k2*(k1**2 + k2**2 + 2*k1*k2*u12)**2)

    # Z3 term in Eq. 25
    def ez3(self, k1, k2):

        l1, l2 = self.l1, self.l2
        b1, b2, b3, be, g21, g2x = self.b1, self.b2, self.b3, self.be, self.g21, self.g2x

        if (l1 == 0 and l2 == 0):
            if (k1 != k2):
                return (-(4*k1*k2*(1155*b1*be**4*k1**14 +
                                   70*be**2*(b1*(2310 + be*(1584 + 253*be + 9*b1*(198 + be*(132 + 25*be)))) +
                                             693*(7 + 3*be)*g21)*k1**12*k2**2 +
                                   7*(b1*(242550 + 1540*be*(180 + 77*be) + 33*be**3*(760 + 111*be) +
                                          60*b1*be*(3465 + 2*be*(2772 + be*(1683 + 2*be*(297 + 50*be))))) -
                                       2310*(-315 + be*(-315 - 70*be + 6*be**2))*g21)*k1**10*k2**4 -
                                   2*(21*b1**2*be*(92400 + be*(120120 + be*(62766 + be*(18964 + 2675*be)))) +
                                      11*b1*(183750 + be*(191100 + be*(88200 + be*(22092 + 2845*be)))) +
                                       231*(980*b3*(3 + be)*(15 + be*(10 + 3*be)) +
                                            144*b2*(2975 + be*(2975 + be*(1281 + 209*be))) +
                                            1617*(5 + be)*(5 + be*(4 + be))*g21 - 224 *
                                            (525 + be*(525 + be*(203 + 27*be)))*g2x
                                            ))*k1**8*k2**6 + (b1*(6387150 +
                                                                  be*(1848*b1**2*be*(35 + 3*be*(14 + 5*be))**2 +
                                                                      11*(882000 + be*(727356 + be*(297024 + 50797*be))) +
                                                                      12*b1*(256025 + be*(970200 + be*(1086393 + 501886*be + 89370*be**2))))) -
                                                              747054*(5 + be)*(5 + be*(4 + be))*g21)*k1**6*k2**8 -
                                   14*(b1*(34650 + be*(69300 +
                                                       be*(51590 + 33*be*(340 + 11*be) +
                                                           15*b1*(5544 + be*(6732 + be*(2024 + 133*be)))))) +
                                       1155*(-315 + be*(-315 - 70*be + 6*be**2))*g21)*k1**4*k2**10 -
                                   35*be**2*(b1*(3696 + be*(3960 + 913*be + 12*b1*(297 + 2*be*(231 + 65*be)))) -
                                             1386*(7 + 3*be)*g21)*k1**2*k2**12 - 210*b1*be**4*(11 + 15*b1*be)*k2**14) +
                          105*(k1 - k2)**3*(k1 + k2)**3*(11*b1*be**4*k1**10 +
                                                         2*be**2*(b1*(770 + 66*(8 + 9*b1)*be + 99*(1 + 4*b1)*be**2 + 75*b1*be**3) +
                                                                  231*(7 + 3*be)*g21)*k1**8*k2**2 +
                                                         2*(b1*(8085 + 2*be*(4620 + 3465*b1 + 11*be*(273 + 17*be*(6 + be)) +
                                                                             6*b1*be*(924 + be*(693 + 286*be + 50*be**2)))) +
                                                            693*(35 + be*(35 + 2*be*(7 + be)))*g21)*k1**6*k2**4 +
                                                         2*(2*b1*(1155 + be*(2310 + be *
                                                                             (2541 + 22*be*(57 + 11*be) + 6*b1*(462 + be*(693 + be*(374 + 75*be)))))) -
                                                             693*(35 + be*(35 + 2*be*(7 + be)))*g21)*k1**4*k2**6 +
                                                         be**2*(b1*(1232 + 3*be*(440 + 121*be + 4*b1*(99 + 2*be*(77 + 25*be)))) -
                                                                462*(7 + 3*be)*g21)*k1**2*k2**8 + 2*b1*be**4*(11 + 15*b1*be)*k2**10) *
                          (np.log((k1 - k2)**2) - 2*np.log(k1 + k2)))/(4.07484e7*b1**3*k1**9*k2**7))
            else:
                return (-(42*b1**3*be**2*(35 + 3*be*(14 + 5*be))**2 +
                          12*b1**2*be*(1225 + 3*be*(4900 + be*(6566 + 3276*be + 615*be**2))) +
                          2*b1*(40425 + be*(73500 + be*(70462 + 9*be*(3500 + 633*be)))) -
                          42*(36*b2*(2975 + be*(2975 + be*(1281 + 209*be))) +
                        7*(35*b3*(3 + be)*(15 + be*(10 + 3*be)) +
                           4*(525 + be*(525 + be*(203 + 27*be)))*(g21 - 2*g2x))))/(231525.*b1**3))

        if (l1 == 0 and l2 == 2):
            if (k1 != k2):
                return (-(be*(4*k1*k2*(105*be**2*(2*b1*(715 + be*(221 + 45*b1*(13 + 3*be))) + 3003*g21)*k1**14 +
                                       35*(2*b1*(63063 + be*(74217 + 377*be*(77 + 13*be) +
                                                             9*b1*(7722 + be*(11154 + be*(4979 + 905*be))))) +
                        3003*(126 + be*(120 + 19*be))*g21)*k1**12*k2**2 +
                    7*(26*b1*(4620 + be*(3080 + 9*be*(825 + 179*be))) +
                        30*b1**2*(72072 + be*(95238 + be*(52338 + be*(23829 + 4547*be)))) -
                        3003*(1050 + be*(1240 + 207*be))*g21)*k1**10*k2**4 -
                    13*(b1*(918456 + 4*be*(209286 + be*(121132 + 20645*be))) +
                        6*b1**2*(517440 + be*(809886 + be*(499422 + be*(191267 + 30145*be)))) +
                        33*(1152*b2*(1519 + be*(1050 + 307*be)) +
                            7*(1568*b3*(15 + be*(10 + 3*be)) + (6468 + 1049*be**2)*g21 -
                                256*(147 + be*(70 + 27*be))*g2x)))*k1**8*k2**6 +
                    (96096*b1**3*be*(1 + be)*(7 + 5*be)*(35 + 3*be*(14 + 5*be)) +
                        26*b1*(3172554 + be*(3883110 + be*(1842643 + 346949*be))) +
                        6*b1**2*(5325320 + be*(23621598 + be*(30019990 + be*(15187159 + 2925165*be)))) -
                        3003*(6468 + 1049*be**2)*g21)*k1**6*k2**8 -
                    7*(2*b1*(615615 + be*(545545 + 1677*(33 - 7*be)*be +
                                          15*b1*(66924 + be*(77220 + be*(17875 + 53*be))))) +
                        3003*(1050 + be*(1240 + 207*be))*g21)*k1**4*k2**10 -
                    35*(2*b1*(18018 + be*(45474 +
                                          be*(37895 + 7813*be + 3*b1*(15444 + be*(18603 + 4585*be))))) -
                        3003*(126 + be*(120 + 19*be))*g21)*k1**2*k2**12 -
                    105*be**2*(2*b1*(572 + be*(442 + 15*b1*(39 + 41*be))) - 3003*g21)*k2**14) +
                    105*(k1 - k2)**3*(k1 + k2)**3 *
                    (be**2*(2*b1*(715 + be*(221 + 45*b1*(13 + 3*be))) + 3003*g21)*k1**10 +
                     (26*b1*(1617 + be*(1903 + 9*be*(99 + 19*be))) +
                        6*b1**2*be*(7722 + be*(11154 + be*(5499 + 1025*be))) +
                        3003*(42 + be*(40 + 9*be))*g21)*k1**8*k2**2 +
                     2*(2*b1*(6006*(5 + 6*b1) + 429*(80 + 183*b1)*be + 715*(25 + 99*b1)*be**2 +
                              13*(263 + 2559*b1)*be**3 + 6225*b1*be**4) + 3003*(21 + 4*be*(3 + be))*g21)*k1**6 *
                        k2**4 + 2*(b1*(57057 + 13*be*(5907 + be*(3091 + 641*be)) +
                                       12*b1*be*(5577 + be*(9867 + be*(5863 + 1275*be)))) -
                                   3003*(21 + 4*be*(3 + be))*g21)*k1**4*k2**6 +
                     (2*b1*(6006 + be*(15158 + 39*be*(363 + 97*be) +
                                       3*b1*be*(5148 + be*(6721 + 2075*be)))) - 3003*(42 + be*(40 + 9*be))*g21) *
                        k1**2*k2**8 + be**2*(2*b1*(572 + be*(442 + 15*b1*(39 + 41*be))) - 3003*g21)*k2**10) *
                    (np.log((k1 - k2)**2) - 2*np.log(k1 + k2))))/(2.1189168e8*b1**3*k1**9*k2**7))
            else:
                return ((4*be*(-21*b1**3*be*(1 + be)*(7 + 5*be)*(35 + 3*be*(14 + 5*be)) -
                               2*b1*(7203 + be*(9289 + 9*be*(505 + 99*be))) -
                               6*b1**2*(245 + be*(3255 + be*(5089 + 57*be*(49 + 10*be)))) +
                               3*(36*b2*(1519 + be*(1050 + 307*be)) +
                                  7*(49*b3*(15 + be*(10 + 3*be)) + 4*(147 + be*(70 + 27*be))*(g21 - 2*g2x))))) /
                        (46305.*b1**3))

        if (l1 == 2 and l2 == 2):
            if (k1 != k2):
                return (-(4*k1*k2*(14175*b1*be**4*k1**18 +
                                   210*be**2*(b1*(8580 + be*(7072 + 1358*be + 9*b1*(780 + be*(590 + 117*be)))) +
                                              546*(33 + 17*be)*g21)*k1**16*k2**2 +
                                   70*(b1*(189189 + 2*be*(169884 + be*(115401 + be*(39572 + 6943*be)) +
                                                          9*b1*(11583 + be*(24453 + be*(19539 + be*(8326 + 1531*be)))))) +
                                       273*(2079 + be*(3267 + be*(1419 + 151*be)))*g21)*k1**14*k2**4 +
                                   2*(b1*(-11351340 - 540540*(33 + 25*b1)*be - 110110*(64 + 135*b1)*be**2 -
                                          266994*(2 + 5*b1)*be**3 + 9*(8957 + 248360*b1)*be**4 + 720048*b1*be**5) -
                                       1911*(31185 + be*(49005 + be*(22297 + 3213*be)))*g21)*k1**12*k2**6 -
                                   4*(3*b1**2*be*(-1789788 + be*(1183182 + be*(4574856 + be*(2502259 + 463655*be)))) +
                                      b1*(-2816814 + be*(-2510508 + be*(4578288 + be*(3456648 + 666035*be)))) +
                                       39*(8448*b2*(147 + be*(231 + be*(699 + 271*be))) +
                                           7*(9856*b3*be**2*(7 + 3*be) +
                                              3*(-41503 + be*(-65219 + 2*be*(-9053 + 213*be)))*g21 -
                                           1408*(-147 + be*(-231 + be*(-13 + 23*be)))*g2x)))*k1**10*k2**8 +
                                   2*(b1*(38804766 + be*(74522448 + 384384*b1**2*be*(1 + be)**2*(7 + 5*be)**2 +
                                          be*(92317368 + be*(53941056 + 11332691*be)) +
                                          6*b1*(9971962 + be*(27333306 + be*(31994248 + be*(17984861 + 3763132*be)))))) -
                                      1638*(-41503 + be*(-65219 + 2*be*(-9053 + 213*be)))*g21)*k1**8*k2**10 +
                                   2*(b1*(-2837835 + 2*be**2*(1494493 + 3*be*(283920 + 87719*be)) +
                                          42*b1*be*(-250965 + be*(-225225 + be*(31785 + be*(64520 + 23917*be))))) -
                                       1911*(31185 + be*(49005 + be*(22297 + 3213*be)))*g21)*k1**6*k2**12 -
                                   14*(b1*(270270 + be*(849420 +
                                                        be*(969540 + 35*be*(12428 + 2395*be) +
                                                            6*b1*(173745 + be*(293085 + 2*be*(76605 + 14966*be)))))) -
                                       1365*(2079 + be*(3267 + be*(1419 + 151*be)))*g21)*k1**4*k2**14 -
                                   105*be**2*(b1*(13728 + be*(17680 + 5027*be + 12*b1*(1170 + be*(2115 + 719*be)))) -
                                              1092*(33 + 17*be)*g21)*k1**2*k2**16 - 5670*b1*be**4*(5 + 7*b1*be)*k2**18) +
                          105*(k1 - k2)**3*(k1 + k2)**3*(135*b1*be**4*k1**14 +
                                                         2*be**2*(b1*(8580 + be*(7072 + 1538*be + 9*b1*(780 + be*(590 + 117*be)))) +
                                                                  546*(33 + 17*be)*g21)*k1**12*k2**2 +
                                                         (b1*(126126 + 5148*(44 + 27*b1)*be + 572*(349 + 513*b1)*be**2 +
                                                              156*(580 + 1743*b1)*be**3 + 9*(1907 + 14248*b1)*be**4 + 23988*b1*be**5) +
                                                             546*(693 + be*(1089 + be*(649 + 141*be)))*g21)*k1**10*k2**4 +
                                                         2*(b1*(60060 + 18876*(7 + 3*b1)*be + 2574*(70 + 97*b1)*be**2 +
                                                                78*(1282 + 4287*b1)*be**3 + (20299 + 180582*b1)*be**4 + 36525*b1*be**5) +
                                                             819*(-77 + be*(-121 + be*(33 + 29*be)))*g21)*k1**8*k2**6 +
                                                         (b1*(150150 + be*(302016 + be*(355212 + be*(209040 + 46543*be)) +
                                                                           12*b1*(16731 + be*(45903 + be*(55731 + be*(33323 + 7500*be)))))) -
                                                             1638*(-77 + be*(-121 + be*(33 + 29*be)))*g21)*k1**6*k2**8 +
                                                         2*(b1*(18018 + be*(56628 + be *
                                                                            (82940 + 6*be*(8762 + 2159*be) +
                                                                             3*b1*(23166 + be*(45318 + be*(31708 + 8135*be)))))) -
                                                             273*(693 + be*(1089 + be*(649 + 141*be)))*g21)*k1**4*k2**10 +
                                                         be**2*(b1*(13728 + be*(17680 + 5747*be + 12*b1*(1170 + be*(2115 + 803*be)))) -
                                                                1092*(33 + 17*be)*g21)*k1**2*k2**12 + 54*b1*be**4*(5 + 7*b1*be)*k2**14) *
                          (np.log((k1 - k2)**2) - 2*np.log(k1 + k2)))/(1.69513344e8*b1**3*k1**11*k2**9))
            else:
                return ((8*(-21*b1**3*be**2*(1 + be)**2*(7 + 5*be)**2 -
                            6*b1**2*be*(490 + be*(1281 + be*(1498 + be*(873 + 190*be)))) -
                            b1*(1911 + be*(3696 + be*(4402 + be*(2608 + 567*be)))) +
                            3*(98*b3*be**2*(7 + 3*be) + 12*b2*(147 + be*(231 + be*(699 + 271*be))) +
                               7*(-147 + be*(-231 + be*(-13 + 23*be)))*(g21 - 2*g2x))))/(9261.*b1**3))

        if l1 == 0 and l2 == 4:
            if k1 != k2:
                return -7.079088711741773e-10*(be**2*(4*k1*k2*(105*(b1*(35035 + 3*be*(8450 + 1929*be + 30*b1*(455 + 2*be*(225 + 53*be)))) +
                                                                    1365*(77 + 39*be)*g21)*k1**14 + 35 *
                                                               (2*b1*(110825 + 3*be*(34216 + 8817*be) + 9*b1*(68640 + be*(98176 + be*(48744 + 9635*be)))) -
                                                                273*(407 + 453*be)*g21)*k1**12*k2**2 -
                                                               21*(b1*(445445 + be*(231530 + 31893*be) + 30*b1*(59488 + be*(106327 + 44586*be + 6802*be**2))) +
                                                                   1365*(1903 + 717*be)*g21)*k1**10*k2**4 -
                                                               (2*b1*(2577575 + 27*be*(233532 + 78595*be)) + 18*b1**2*(5285280 + be*(5053048 + be*(3057072 + 666815*be))) +
                                                                39*(540672*b2*(7 + 3*be) - 7*(331331 + 138249*be)*g21 + 630784*(7 + 3*be)*g2x))*k1**8*k2**6 +
                                                               (b1*(172949777 + 33*be*(4005586 + 982833*be) + 139776*b1**2*be*(22 + 15*be)*(35 + 3*be*(14 + 5*be)) +
                                                                    6*b1*(30590560 + 3*be*(23508849 + 2*be*(7764479 + 1831175*be)))) + 273*(331331 + 138249*be)*g21)*k1**6*k2**8
                                                               + 21*(2*b1*(85085 + be*(295880 + 77343*be) + 15*b1*(-27456 + be*(-25688 + be*(18744 + 7145*be)))) -
                                                                     1365*(1903 + 717*be)*g21)*k1**4*k2**10 -
                                                               35*(b1*(371657 + 3*be*(114790 + 17907*be + 6*b1*(30381 + 32286*be + 5950*be**2))) + 273*(407 + 453*be)*g21)*k1**2 *
                                                               k2**12 - 105*(2*b1*(5005 + 3*be*(3380 + 3*be*(643 + 25*b1*(48 + 37*be)))) - 1365*(77 + 39*be)*g21)*k2**14) +
                                                      105*(k1 - k2)**3*(k1 + k2)**3*((b1*(35035 + 3*be*(8450 + 1929*be + 30*b1*(455 + 2*be*(225 + 53*be)))) +
                                                                                      1365*(77 + 39*be)*g21)*k1**10 + 3 *
                                                                                     (2*b1*(27885 + be*(22672 + 5511*be) + 3*b1*(22880 + be*(38792 + be*(22248 + 4625*be)))) + 819*(99 + 41*be)*g21) *
                                                                                     k1**8*k2**2 + 2*(b1*(139997 + 9*be*(14482 + 3837*be) + 18*b1*(20592 + be*(31499 + 178*be*(111 + 25*be)))) -
                                                                                                      273*(187 + 81*be)*g21)*k1**6*k2**4 +
                                                                                     2*(2*b1*(86372 + 18*be*(3991 + 1023*be) + 9*b1*(4576 + be*(17784 + be*(14172 + 3725*be)))) +
                                                                                        273*(187 + 81*be)*g21)*k1**4*k2**6 +
                                                                                     3*(b1*(50193 + be*(56290 + 16257*be + 6*b1*(10127 + 2*be*(6981 + 2225*be)))) - 819*(99 + 41*be)*g21)*k1**2 *
                                                                                     k2**8 + (2*b1*(5005 + 3*be*(3380 + 3*be*(643 + 25*b1*(48 + 37*be)))) - 1365*(77 + 39*be)*g21)*k2**10) *
                                                      (np.log((k1 - k2)**2) - 2*np.log(k1 + k2))))/(b1**3*k1**9*k2**7)
            else:
                return (16*be**2*(-21*b1**3*be*(22 + 15*be)*(35 + 3*be*(14 + 5*be)) - b1*(23947 + 9*be*(2050 + 503*be)) -
                        6*b1**2*(1925 + 3*be*(2471 + be*(1841 + 465*be))) + 264*(7 + 3*be)*(12*b2 - 7*g21 + 14*g2x)))/(848925.*b1**3)

        if l1 == 2 and l2 == 4:
            if k1 != k2:
                return -5.205212288045421e-11*(be*(18900*be**2*(2*b1*(2975 + be*(901 + 147*b1*(17 + 4*be))) + 12495*g21)*k1**19*k2 +
                                                   420*(68*b1*(105105 + be*(130195 + 51336*be + 8799*be**2)) +
                                                        90*b1**2*be*(92820 + be*(140590 + be*(67031 + 12762*be))) + 1785*(12012 + be*(12272 + 2151*be))*g21)*k1**17*k2**3
                                                   + 9520*(b1*(-261690 + be*(-170378 + 3*be*(23111 + 9159*be)) +
                                                               9*b1*(102960 + be*(147654 + be*(105647 + be*(55959 + 11806*be))))) - 21*(108537 + 2*be*(55042 + 9609*be))*g21) *
                                                   k1**15*k2**5 - 48*(b1*(7735*(4719 + 10333*be) + 34*be**2*(1851199 + 310386*be) +
                                                                          105*b1*(3967392 + be*(7276204 + be*(5231665 + be*(2056881 + 319696*be))))) +
                                                                      12495*(-18447 + 4*be*(-4511 + 213*be))*g21)*k1**13*k2**7 -
                                                   8*(68*b1*(-915915 + be*(544193 + 3*be*(437771 + 317350*be))) +
                                                      18*b1**2*(-81681600 + be*(-138283236 + be*(-17027183 + 2*be*(14316193 + 5115870*be)))) +
                                                      51*(3514368*b2*(21 + be*(22 + 9*be)) - 7*(3645642 + be*(3916744 + 2194743*be))*g21 +
                                                          4100096*(21 + be*(22 + 9*be))*g2x))*k1**11*k2**9 +
                                                   8*(9504768*b1**3*be**2*(1 + be)*(7 + 5*be)*(22 + 15*be) +
                                                      34*b1*(60759699 + be*(91587353 + 6*be*(12920993 + 3490003*be))) +
                                                      6*b1**2*(24504480 + be*(486342766 + be*(1031366727 + 872904542*be + 236095680*be**2))) +
                                                      357*(3645642 + be*(3916744 + 2194743*be))*g21)*k1**9*k2**11 +
                                                   48*(17*b1*(8618610 + be*(11974690 + be*(4634371 + 856299*be))) +
                                                       105*b1**2*(-350064 + be*(1550094 + be*(2838337 + be*(1264341 + 236654*be)))) -
                                                       12495*(-18447 + 4*be*(-4511 + 213*be))*g21)*k1**7*k2**13 -
                                                   9520*(b1*(373659 + be*(360737 + 42*(1109 - 66*be)*be + 9*b1*(83304 + be*(90471 + be*(20067 + 644*be))))) +
                                                         21*(108537 + 2*be*(55042 + 9609*be))*g21)*k1**5*k2**15 -
                                                   420*(2*b1*(1021020 + be*(2594540 + 51*be*(42213 + 9347*be) + 45*b1*be*(59670 + be*(71927 + 18588*be)))) -
                                                        1785*(12012 + be*(12272 + 2151*be))*g21)*k1**3*k2**17 -
                                                   18900*be**2*(68*b1*(70 + 53*be) + 42*b1**2*be*(119 + 122*be) - 12495*g21)*k1*k2**19 +
                                                   105*(k1 - k2)**3*(k1 + k2)**3*(45*be**2*(2*b1*(2975 + be*(901 + 147*b1*(17 + 4*be))) + 12495*g21)*k1**14 +
                                                   (450*b1**2*be*(18564 + be*(28118 + be*(14739 + 2866*be))) +
                                                       68*b1*(105105 + be*(130195 + 3*be*(20612 + 3993*be))) + 1785*(12012 + be*(12272 + 2991*be))*g21)*k1**12*k2**2
                                                   + 3*(2*b1*(437580*(5 + 8*b1) + 2652*(1241 + 3293*b1)*be + 17*(119563 + 542094*b1)*be**2 +
                                                              51*(8551 + 93489*b1)*be**3 + 955200*b1*be**4) + 1071*(1716 + be*(1872 + 1199*be))*g21)*k1**10*k2**4 +
                                                   (68*b1*(222222 + be*(353626 + 9*be*(26470 + 6563*be))) +
                                                    18*b1**2*(466752 + be*(1890876 + be*(3157376 + be*(2061981 + 479650*be)))) -
                                                    357*(17160 + be*(17888 + 6813*be))*g21)*k1**8*k2**6 +
                                                   (34*b1*(466752 + be*(706576 + 9*be*(54261 + 13391*be))) +
                                                    18*b1**2*(233376 + be*(1484236 + be*(2307240 + be*(1625829 + 416600*be)))) +
                                                    357*(17160 + be*(17888 + 6813*be))*g21)*k1**6*k2**8 +
                                                   3*(68*b1*(68211 + be*(107913 + be*(66616 + 16059*be))) +
                                                      6*b1**2*be*(944112 + be*(1820938 + be*(1247817 + 318050*be))) - 1071*(1716 + be*(1872 + 1199*be))*g21)*k1**4 *
                                                   k2**10 + (2*b1*(1021020 + be*(2594540 + 3*be*(812821 + 230979*be + 15*b1*(59670 + be*(78591 + 25420*be))))) -
                                                             1785*(12012 + be*(12272 + 2991*be))*g21)*k1**2*k2**12 +
                                                   45*be**2*(68*b1*(70 + 53*be) + 42*b1**2*be*(119 + 122*be) - 12495*g21)*k2**14) *
                                                   (np.log((k1 - k2)**2) - 2*np.log(k1 + k2))))/(b1**3*k1**11*k2**9)
            else:
                return (32*be*(-21*b1**3*be**2*(1 + be)*(7 + 5*be)*(22 + 15*be) - 2*b1*(2541 + be*(3733 + 12*be*(242 + 63*be))) -
                        6*b1**2*be*(1078 + be*(2037 + be*(1688 + 465*be))) + 33*(21 + be*(22 + 9*be))*(12*b2 - 7*g21 + 14*g2x)))/(169785.*b1**3)

        if l1 == 4 and l2 == 4:
            if k1 != k2:
                return (4*k1*k2*(-1693605375*b1*be**4*k1**22 - 86625*be**2 *
                                 (38*b1*(62475 + 50456*be + 9482*be**2) + 882*b1**2*be*(2261 + be*(1691 + 339*be)) + 47481*(105 + 53*be)*g21)*k1**20 *
                                 k2**2 - 1155*(b1*(1188212025 + 39680550*(52 + 35*b1)*be + 48450*(26623 + 58590*b1)*be**2 +
                                                   6460*(62677 + 335430*b1)*be**3 + 342*(198422 + 2624375*b1)*be**4 + 165192480*b1*be**5) +
                                               33915*(105105 + be*(159705 + 4*be*(15006 + 787*be)))*g21)*k1**18*k2**4 +
                                 1155*(2*b1*(1075048975 + 1889550*(871 + 758*b1)*be + 29070*(30269 + 69891*b1)*be**2 +
                                             323*(628846 + 2854863*b1)*be**3 + 5472*(3483 + 32113*b1)*be**4 + 4936410*b1*be**5) +
                                       6783*(1626625 + be*(2471625 + be*(1184283 + 176627*be)))*g21)*k1**16*k2**6 +
                                 33*(b1*(-24612963375 + 610470*be*(-16900 + 53961*be) + 19*be**3*(1353729720 + 279851953*be) +
                                         630*b1*be*(-89669645 + 3*be*(9825014 + be*(61233371 + 36088068*be + 6922046*be**2)))) -
                                     712215*(575575 + be*(874575 + be*(400293 + 52397*be)))*g21)*k1**14*k2**8 -
                                 (198*b1**2*be*(105814800 + be*(13022342550 + be*(18349941049 + be*(5993624746 + 458078925*be)))) +
                                     38*b1*(12284146875 + be*(37331043750 + be*(42348128460 + be*(15571354238 + 1400751855*be)))) +
                                     10659*(-459834375*g21 + be*(-10223616*b2*be*(33 + 17*be) + 7*(-99815625 + be*(-24985833 + 4708183*be))*g21 -
                                                                 11927552*be*(33 + 17*be)*g2x)))*k1**12*k2**10 +
                                 (b1*(1633791534375 + be*(2837159325000 - 2889449472*b1**2*be**3*(22 + 15*be)**2 -
                                                          19*be*(16366426626 + be*(79088634064 + 30383192337*be)) +
                                                          6*b1*(398584511325 + be*(798588161910 + be*(139383539801 - 18*be*(20859491411 + 9884934165*be)))))) -
                                     74613*(-65690625 + be*(-99815625 + be*(-24985833 + 4708183*be)))*g21)*k1**10*k2**12 -
                                 33*(2*b1*(36495083625 + 610470*be*(88725 + 49219*be) + 19*be**3*(489807570 + 65777953*be) +
                                           315*b1*be*(201132100 + 3*be*(104327062 + be*(61233371 + 3*be*(6591784 + 868939*be))))) +
                                     712215*(575575 + be*(874575 + be*(400293 + 52397*be)))*g21)*k1**8*k2**14 -
                                 1155*(b1*(-476901425 + 2*be*(-944775*(-52 + 903*b1) + 2907*(171103 - 101250*b1)*be +
                                                              323*(982100 + 2854863*b1)*be**2 + 684*(98882 + 992851*b1)*be**3 + 148132530*b1*be**4)) -
                                       6783*(1626625 + be*(2471625 + be*(1184283 + 176627*be)))*g21)*k1**6*k2**16 +
                                 1155*(450*b1**2*be**2*(3052350 + be*(4815284 + be*(2208883 + 344586*be))) +
                                       38*b1*(8933925 + be*(27149850 + be*(28842285 + be*(11190250 + 1669671*be)))) -
                                       33915*(105105 + be*(159705 + 4*be*(15006 + 787*be)))*g21)*k1**4*k2**18 +
                                 86625*be**2*(b1*(1899240 + be*(2396660 + 661979*be + 126*b1*(15827 + be*(28063 + 9258*be)))) -
                                              47481*(105 + 53*be)*g21)*k1**2*k2**20 + 178274250*b1*be**4*(19 + 27*b1*be)*k2**22) -
                        3465*(k1 - k2)**3*(k1 + k2)**3*(488775*b1*be**4*k1**18 +
                                                        25*be**2*(882*b1**2*be*(2261 + be*(1691 + 339*be)) + 38*b1*(62475 + 2*be*(25228 + 5427*be)) +
                                                                  47481*(105 + 53*be)*g21)*k1**16*k2**2 +
                                                        (b1*(396070675 + 13226850*(52 + 35*b1)*be + 436050*(1349 + 2170*b1)*be**2 + 6460*(40679 + 132390*b1)*be**3 +
                                                         171*(286793 + 2331050*b1)*be**4 + 74997360*b1*be**5) + 33915*(35035 + be*(53235 + 4*be*(7452 + 1499*be)))*g21) *
                                                        k1**14*k2**4 + 3*(2*b1*(56581525 + 3*be *
                                                                                (209950*(195 + 74*b1) + 4845*(9763 + 13402*b1)*be + 646*(39551 + 133833*b1)*be**2 +
                                                                                 19*(279562 + 2525673*b1)*be**3 + 10014285*b1*be**4)) +
                                                                          6783*(-25025 + 3*be*(-12675 - 4194*be + 74*be**2))*g21)*k1**12*k2**6 +
                                                        (38*b1*(7062055 + 2*be*(7239960 + be*(9076011 + be*(5594989 + 1331154*be)))) +
                                                            18*b1**2*be*(14738490 + be*(47678676 + be*(66053177 + be*(44107379 + 10806210*be)))) -
                                                            6783*(10010 + be*(15210 + be*(19851 + 7543*be)))*g21)*k1**10*k2**8 +
                                                        (2*b1*(142262120 + 755820*(377 + 205*b1)*be + 969*(362539 + 461268*b1)*be**2 + 323*(643148 + 1840491*b1)*be**3 +
                                                               171*(285817 + 2173819*b1)*be**4 + 91486260*b1*be**5) + 6783*(10010 + be*(15210 + be*(19851 + 7543*be)))*g21) *
                                                        k1**8*k2**10 + 3*(b1*(153578425 + 629850*(468 + 301*b1)*be + 5814*(50213 + 81250*b1)*be**2 +
                                                                              3876*(39625 + 133833*b1)*be**3 + 171*(195123 + 1686058*b1)*be**4 + 64326240*b1*be**5) -
                                                                          6783*(-25025 + 3*be*(-12675 - 4194*be + 74*be**2))*g21)*k1**6*k2**12 +
                                                        (90*b1**2*be**2*(5087250 + be*(9502660 + be*(6300685 + 1514193*be))) +
                                                            646*b1*(175175 + be*(532350 + be*(761535 + 2*be*(233375 + 54243*be)))) -
                                                            33915*(35035 + be*(53235 + 4*be*(7452 + 1499*be)))*g21)*k1**4*k2**14 +
                                                        25*be**2*(b1*(1899240 + be*(2396660 + 766251*be + 126*b1*(15827 + be*(28063 + 10434*be)))) -
                                                                  47481*(105 + 53*be)*g21)*k1**2*k2**16 + 51450*b1*be**4*(19 + 27*b1*be)*k2**18) *
                        (np.log((k1 - k2)**2) - 2*np.log(k1 + k2)))/(1.33840202496e13*b1**3*k1**13*k2**11)
            else:
                return (-128*be**2*(21*b1**3*be**2*(22 + 15*be)**2 + 6*b1**2*be*(3388 + 3*be*(1331 + 465*be)) +
                        b1*(15972 + be*(14960 + 4557*be)) - 66*(33 + 17*be)*(12*b2 - 7*g21 + 14*g2x)))/(3.112725e6*b1**3)
